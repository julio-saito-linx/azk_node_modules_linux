"use strict";
var $___46__46__47_fs_45_helper__;
var FsHelper = ($___46__46__47_fs_45_helper__ = require("../fs-helper"), $___46__46__47_fs_45_helper__ && $___46__46__47_fs_45_helper__.__esModule && $___46__46__47_fs_45_helper__ || {default: $___46__46__47_fs_45_helper__}).default;
var request = require('requestretry');
var Q = require('q');
var log = require('../helpers/logger');
var fs = require('fs');
var path = require('path');
var prettyBytes = require('pretty-bytes');
var _ = require('lodash');
var fsHelper = new FsHelper();
var DockerRegistry = function DockerRegistry(request_options) {
  this.__request_options = request_options || {};
};
($traceurRuntime.createClass)(DockerRegistry, {
  get request_options() {
    return this.__request_options;
  },
  set request_options(value) {
    this.__request_options = value;
  },
  tags: function(hubResult) {
    var request_options_local = this.__request_options;
    return new Q.Promise(function(resolve, reject) {
      var options = _.assign({
        url: 'https://' + hubResult.endpoint + '/v1/repositories/' + hubResult.namespace + '/' + hubResult.repository + '/' + 'tags',
        headers: {'Authorization': 'Token ' + hubResult.token}
      }, request_options_local);
      function callback(error, response, body) {
        if (!error && response.statusCode === 200) {
          var result = JSON.parse(body);
          log.debug('\n\n:: docker-registry - tags ::');
          log.debug(result);
          resolve(result);
        } else {
          reject(error);
        }
      }
      request(options, callback);
    });
  },
  getImageIdByTag: function(hubResult, tag) {
    var request_options_local = this.__request_options;
    return new Q.Promise(function(resolve, reject) {
      var options = _.assign({
        url: 'https://' + hubResult.endpoint + '/v1/repositories/' + hubResult.namespace + '/' + hubResult.repository + '/tags/' + tag,
        headers: {'Authorization': 'Token ' + hubResult.token}
      }, request_options_local);
      function callback(error, response, body) {
        if (!error && response.statusCode === 200) {
          var result = JSON.parse(body);
          log.debug('\n\n:: docker-registry - getImageIdByTag ::');
          log.debug(result);
          resolve(result);
        } else {
          reject(error);
        }
      }
      request(options, callback);
    });
  },
  ancestry: function(hubResult, imageId) {
    var request_options_local = this.__request_options;
    return new Q.Promise(function(resolve, reject) {
      var options = _.assign({
        url: 'https://' + hubResult.endpoint + '/v1/images/' + imageId + '/ancestry',
        headers: {'Authorization': 'Token ' + hubResult.token}
      }, request_options_local);
      function callback(error, response, body) {
        if (!error && response.statusCode === 200) {
          var result = JSON.parse(body);
          log.debug('\n\n:: docker-registry - ancestry ::');
          log.debug(result);
          resolve(result);
        } else {
          reject(error);
        }
      }
      try {
        request(options, callback);
      } catch (err) {
        reject(err);
      }
    });
  },
  imageJson: function(hubResult, imageId) {
    var request_options_local = this.__request_options;
    return new Q.Promise(function(resolve, reject) {
      var options = _.assign({
        url: 'https://' + hubResult.endpoint + '/v1/images/' + imageId + '/json',
        headers: {'Authorization': 'Token ' + hubResult.token}
      }, request_options_local);
      function callback(error, response, body) {
        if (!error && response.statusCode === 200) {
          var result = JSON.parse(body);
          log.debug('\n\n:: docker-registry - imageJson ::');
          log.debug(result);
          resolve(result);
        } else {
          reject(error);
        }
      }
      request(options, callback);
    });
  },
  allAnscestorByTag: function(hubResult, tag) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__2() {
      var imageId,
          anscestors;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              log.debug('\n\n:: docker-registry - allAnscestorByTag ::');
              log.debug('endpoint:', hubResult.endpoint);
              log.debug('token:', hubResult.token);
              log.debug('namespace:', hubResult.namespace);
              log.debug('repository:', hubResult.repository);
              log.debug('tag:', tag);
              log.debug('>>------------');
              $ctx.state = 12;
              break;
            case 12:
              $ctx.state = 2;
              return this.getImageIdByTag(hubResult, tag);
            case 2:
              imageId = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = 6;
              return this.ancestry(hubResult, imageId);
            case 6:
              anscestors = $ctx.sent;
              $ctx.state = 8;
              break;
            case 8:
              $ctx.returnValue = anscestors;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__2, this);
    }).bind(this))();
  },
  downloadImageGetSize: function(hubResult, imageId) {
    var request_options_local = this.__request_options;
    return function(callback) {
      var options = _.assign({
        url: 'https://' + hubResult.endpoint + '/v1/images/' + imageId + '/layer',
        headers: {'Authorization': 'Token ' + hubResult.token},
        method: 'GET'
      }, request_options_local);
      var r = request(options).on('response', function(res) {
        log.debug('\n\n:: docker-registry - downloadImageGetSize headers ::');
        log.debug('ID:  ', imageId);
        var len = parseInt(res.headers['content-length'], 10);
        log.debug('res.headers:', res.headers);
        log.debug('size:', prettyBytes(len));
        r.abort();
        callback(null, len);
      });
    };
  },
  downloadImage: function(hubResult, outputPath, imageId, iProgress) {
    var request_options_local = this.__request_options;
    return new Q.Promise(function(resolve) {
      var options = _.assign({
        url: 'https://' + hubResult.endpoint + '/v1/images/' + imageId + '/layer',
        headers: {'Authorization': 'Token ' + hubResult.token},
        method: 'GET'
      }, request_options_local);
      request(options).on('response', function(res) {
        log.debug('\n\n:: docker-registry - downloadImage headers ::');
        log.debug(res.headers);
        res.on('data', function(chunk) {
          if (iProgress) {
            iProgress(chunk.length);
          }
        });
        res.on('end', function() {
          resolve(outputPath);
        });
      }).pipe(fs.createWriteStream(outputPath));
    });
  },
  prepareLoading: function(hubResult, outputPath, imageId, iProgress) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__2() {
      var outputLoadPath,
          versionFilePath,
          jsonResult,
          jsonFilePath,
          layerTarFilePath;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              outputLoadPath = path.join(outputPath, imageId);
              $ctx.state = 32;
              break;
            case 32:
              $ctx.state = 2;
              return fsHelper.createCleanFolder(outputLoadPath);
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 4:
              versionFilePath = path.join(outputLoadPath, "VERSION");
              $ctx.state = 34;
              break;
            case 34:
              $ctx.state = 6;
              return Q.nfcall(fs.writeFile, versionFilePath, "1.0");
            case 6:
              $ctx.maybeThrow();
              $ctx.state = 8;
              break;
            case 8:
              $ctx.state = 10;
              return this.imageJson(hubResult, imageId);
            case 10:
              jsonResult = $ctx.sent;
              $ctx.state = 12;
              break;
            case 12:
              jsonFilePath = path.join(outputLoadPath, "json");
              $ctx.state = 36;
              break;
            case 36:
              $ctx.state = 14;
              return Q.nfcall(fs.writeFile, jsonFilePath, JSON.stringify(jsonResult, ' ', 3));
            case 14:
              $ctx.maybeThrow();
              $ctx.state = 16;
              break;
            case 16:
              layerTarFilePath = path.join(outputLoadPath, "layer.tar");
              $ctx.state = 38;
              break;
            case 38:
              $ctx.state = 18;
              return this.downloadImage(hubResult, layerTarFilePath, imageId, iProgress);
            case 18:
              $ctx.maybeThrow();
              $ctx.state = 20;
              break;
            case 20:
              $ctx.state = 22;
              return fsHelper.tarPack(outputLoadPath, path.join(outputLoadPath, '..', imageId + '.tar'));
            case 22:
              $ctx.maybeThrow();
              $ctx.state = 24;
              break;
            case 24:
              $ctx.state = 26;
              return fsHelper.removeDirRecursive(outputLoadPath);
            case 26:
              $ctx.maybeThrow();
              $ctx.state = 28;
              break;
            case 28:
              $ctx.returnValue = outputLoadPath;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__2, this);
    }).bind(this))();
  }
}, {});
module.exports = {
  __esModule: true,
  get default() {
    return DockerRegistry;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvY2tlci1yZWdpc3RyeS9pbmRleC5qcyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzkiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMTAiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvOCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci83IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMTUiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7RUFBTyxTQUFPLEVDQWQsRUFBQywrQkFBb0IsQ0FBQSxPQUFNLEFBQUMsZ0JBQWtCLENBQ3RDLENBQUEsZ0NBQXFCLHlDQUEyQixDQUFBLGdDQUFxQixHQUFLLEVBQUMsT0FBTSwrQkFBbUIsQ0FEOUQsQUFDK0QsQ0FBQztBREM5RyxBQUFJLEVBQUEsQ0FBQSxPQUFNLEVBQVEsQ0FBQSxPQUFNLEFBQUMsQ0FBQyxjQUFhLENBQUMsQ0FBQztBQUN6QyxBQUFJLEVBQUEsQ0FBQSxDQUFBLEVBQWMsQ0FBQSxPQUFNLEFBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQztBQUM5QixBQUFJLEVBQUEsQ0FBQSxHQUFFLEVBQVksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxtQkFBa0IsQ0FBQyxDQUFDO0FBQzlDLEFBQUksRUFBQSxDQUFBLEVBQUMsRUFBYSxDQUFB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OztBSkFoQixtQlJ1UlksQ0FBQSxRQUFPLFFBQVEsQUFBQyxDQUFDLGNBQWEsQ0FBRyxDQUFBLElBQUcsS0FBSyxBQUFDLENBQUMsY0FBYSxDQUFHLEtBQUcsQ0FBRyxDQUFBLE9BQU0sRUFBSSxPQUFLLENBQUMsQ0FBQyxDUXZSdkU7O0FJQXZCLGlCQUFHLFdBQVcsQUFBQyxFQUFDLENBQUE7Ozs7O0FKQWhCLG1CUjBSWSxDQUFBLFFBQU8sbUJBQW1CLEFBQUMsQ0FBQyxjQUFhLENBQUMsQ1ExUi9COztBSUF2QixpQkFBRyxXQUFXLEFBQUMsRUFBQyxDQUFBOzs7O0FGQWhCLGlCQUFHLFlBQVksRVY0UkYsZVU1UnNCLEFWNFJULENVNVJTOzs7O0FDQW5DLG1CQUFPLENBQUEsSUFBRyxJQUFJLEFBQUMsRUFBQyxDQUFBOztBSkNtQixNQUMvQixPRkE2QixLQUFHLENBQUMsQ0FBQztJTDJSbEMsQ0k3Um1ELEtKNlI5QyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQUFBQyxFQUFDLENBQUM7RUFDakI7S0c5Um1GO0FIa1NyRixLQUFLLFFBQVEsRUFBSTtBQUNmLFdBQVMsQ0FBRyxLQUFHO0FBQ2YsSUFBSSxRQUFNLEVBQUk7QUFBRSxTQUFPLGVBQWEsQ0FBQztFQUFFO0FBQUEsQUFDekMsQ0FBQztBQUNEIiwiZmlsZSI6ImRvY2tlci1yZWdpc3RyeS9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGc0hlbHBlciBmcm9tICcuLi9mcy1oZWxwZXInO1xuXG52YXIgcmVxdWVzdCAgICAgPSByZXF1aXJlKCdyZXF1ZXN0cmV0cnknKTtcbnZhciBRICAgICAgICAgICA9IHJlcXVpcmUoJ3EnKTtcbnZhciBsb2cgICAgICAgICA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbG9nZ2VyJyk7XG52YXIgZnMgICAgICAgICAgPSByZXF1aXJlKCdmcycpO1xudmFyIHBhdGggICAgICAgID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIHByZXR0eUJ5dGVzID0gcmVxdWlyZSgncHJldHR5LWJ5dGVzJyk7XG52YXIgXyAgICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxudmFyIGZzSGVscGVyID0gbmV3IEZzSGVscGVyKCk7XG5cbmNsYXNzIERvY2tlclJlZ2lzdHJ5IHtcblxuICBjb25zdHJ1Y3RvcihyZXF1ZXN0X29wdGlvbnMpIHtcbiAgICB0aGlzLl9fcmVxdWVzdF9vcHRpb25zID0gcmVxdWVzdF9vcHRpb25zIHx8IHt9O1xuICB9XG5cbiAgZ2V0IHJlcXVlc3Rfb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fX3JlcXVlc3Rfb3B0aW9ucztcbiAgfVxuXG4gIHNldCByZXF1ZXN0X29wdGlvbnModmFsdWUpIHtcbiAgICB0aGlzLl9fcmVxdWVzdF9vcHRpb25zID0gdmFsdWU7XG4gIH1cblxuICB0YWdzKGh1YlJlc3VsdCkge1xuICAgIHZhciByZXF1ZXN0X29wdGlvbnNfbG9jYWwgPSB0aGlzLl9fcmVxdWVzdF9vcHRpb25zO1xuICAgIHJldHVybiBuZXcgUS5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBfLmFzc2lnbih7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly8nICsgaHViUmVzdWx0LmVuZHBvaW50ICsgJy92MS9yZXBvc2l0b3JpZXMvJyArXG4gICAgICAgICAgICAgICAgaHViUmVzdWx0Lm5hbWVzcGFjZSArICcvJyArIGh1YlJlc3VsdC5yZXBvc2l0b3J5ICsgJy8nICArICd0YWdzJyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdUb2tlbiAnICsgaHViUmVzdWx0LnRva2VuXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0X29wdGlvbnNfbG9jYWxcbiAgICAgICk7XG5cbiAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xuICAgICAgICBpZiAoIWVycm9yICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgIC8vIHRhZ3MgYm9keSByZXN1bHRcbiAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAvLyB7XG4gICAgICAgICAgLy8gICBcIjAuMC4xXCI6IFwiZWQ0YmE1M2IyZTMxMzA4M2U5ODU4NzhkZjU4YmI3ZDI0ZDBiMjFjOTY4ODA4NGQ1NmMyMzE1Zjc4ZDcwZWFiZVwiLFxuICAgICAgICAgIC8vICAgXCIwLjAuMlwiOiBcImFmZWNkNzJhNzJmYzJmODE1YWNhNGU3ZmQ0MWJmZDAxZjJlNTkyMmNkNWZiNDNhMDQ0MTZlN2UyOTFhMmIxMjBcIlxuICAgICAgICAgIC8vIH1cbiAgICAgICAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgICBsb2cuZGVidWcoJ1xcblxcbjo6IGRvY2tlci1yZWdpc3RyeSAtIHRhZ3MgOjonKTtcbiAgICAgICAgICBsb2cuZGVidWcocmVzdWx0KTtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRJbWFnZUlkQnlUYWcoaHViUmVzdWx0LCB0YWcpIHtcbiAgICB2YXIgcmVxdWVzdF9vcHRpb25zX2xvY2FsID0gdGhpcy5fX3JlcXVlc3Rfb3B0aW9ucztcbiAgICByZXR1cm4gbmV3IFEuUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIHZhciBvcHRpb25zID0gXy5hc3NpZ24oe1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vJyArIGh1YlJlc3VsdC5lbmRwb2ludCArICcvdjEvcmVwb3NpdG9yaWVzLycgKyBodWJSZXN1bHQubmFtZXNwYWNlICtcbiAgICAgICAgICAgICAgICcvJyArIGh1YlJlc3VsdC5yZXBvc2l0b3J5ICsgJy90YWdzLycgKyB0YWcsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnVG9rZW4gJyArIGh1YlJlc3VsdC50b2tlblxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWVzdF9vcHRpb25zX2xvY2FsXG4gICAgICApO1xuXG4gICAgICBmdW5jdGlvbiBjYWxsYmFjayhlcnJvciwgcmVzcG9uc2UsIGJvZHkpIHtcbiAgICAgICAgaWYgKCFlcnJvciAmJiByZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgICBsb2cuZGVidWcoJ1xcblxcbjo6IGRvY2tlci1yZWdpc3RyeSAtIGdldEltYWdlSWRCeVRhZyA6OicpO1xuICAgICAgICAgIGxvZy5kZWJ1ZyhyZXN1bHQpO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFuY2VzdHJ5KGh1YlJlc3VsdCwgaW1hZ2VJZCkge1xuICAgIHZhciByZXF1ZXN0X29wdGlvbnNfbG9jYWwgPSB0aGlzLl9fcmVxdWVzdF9vcHRpb25zO1xuICAgIHJldHVybiBuZXcgUS5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBfLmFzc2lnbih7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly8nICsgaHViUmVzdWx0LmVuZHBvaW50ICsgJy92MS9pbWFnZXMvJyArIGltYWdlSWQgKyAnL2FuY2VzdHJ5JyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdUb2tlbiAnICsgaHViUmVzdWx0LnRva2VuXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0X29wdGlvbnNfbG9jYWxcbiAgICAgICk7XG5cbiAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xuICAgICAgICBpZiAoIWVycm9yICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICAgIC8vIFtcbiAgICAgICAgICAvLyAgIFwiYWZlY2Q3MmE3MmZjMmY4MTVhY2E0ZTdmZDQxYmZkMDFmMmU1OTIyY2Q1ZmI0M2EwNDQxNmU3ZTI5MWEyYjEyMFwiLFxuICAgICAgICAgIC8vICAgXCIwZjNjNWM4MDI4ZmJhYjhiZDkzYWVjNDA2ZGNkNGRjZTIzMjk2ODk0YWJjZjJjYTkzYmRlNDA4MzQ4OTI2ZjY1XCIsXG4gICAgICAgICAgLy8gICBcImZjZWYyZWVhNjQzNjZmNmRjZTUwODkyYWE0NTcxODBlNWEzMjllYWU2Yjg5NTAwODgxZWRkOTQ0ZTFiNWIxZDBcIixcbiAgICAgICAgICAvLyAgIFwiOWRmZWRlMTViOTkxNTNkZmE4NGVmNjRhNGJlM2NlNTllMDRlMjBmM2NiZGQ3YjZjNThlMjI2MzkwN2M1MDE2M1wiLFxuICAgICAgICAgIC8vICAgXCJhZWFlMjFkMTAyNTY5ZTg3MWRhODZmZDUxYWI4ZmQzNGNhMTIwMzFhNzc5YmE2ZDAyZWVhNTVhN2Y1MTIzYzEwXCIsXG4gICAgICAgICAgLy8gICBcIjE1ZTBjZDMyYzQ2N2NjZWYxYzE2MmVlMTc2MDFlMzRhYTI4ZGUyMTQxMTZiYmEzZDQ2OTg1OTRkODEwYTYzMDNcIixcbiAgICAgICAgICAvLyAgIFwiYzU4MTIxYzdhOGM4MWI1ODQ4ZWMxMGUwNDAyOTQ1NmM3MWRkZDc5NWNjY2E5YzZhMjgxZDQyYWUzNGMzYjczYlwiLFxuICAgICAgICAgIC8vICAgXCI1MTExMzZlYTNjNWE2NGYyNjRiNzhiNTQzMzYxNGFlYzU2MzEwM2I0ZDQ3MDJmM2JhN2Q0ZDI2OThlMjJjMTU4XCJcbiAgICAgICAgICAvLyBdXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgICAgbG9nLmRlYnVnKCdcXG5cXG46OiBkb2NrZXItcmVnaXN0cnkgLSBhbmNlc3RyeSA6OicpO1xuICAgICAgICAgIGxvZy5kZWJ1ZyhyZXN1bHQpO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGltYWdlSnNvbihodWJSZXN1bHQsIGltYWdlSWQpIHtcbiAgICB2YXIgcmVxdWVzdF9vcHRpb25zX2xvY2FsID0gdGhpcy5fX3JlcXVlc3Rfb3B0aW9ucztcbiAgICByZXR1cm4gbmV3IFEuUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIHZhciBvcHRpb25zID0gXy5hc3NpZ24oe1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vJyArIGh1YlJlc3VsdC5lbmRwb2ludCArICcvdjEvaW1hZ2VzLycgKyBpbWFnZUlkICsgJy9qc29uJyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdUb2tlbiAnICsgaHViUmVzdWx0LnRva2VuXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0X29wdGlvbnNfbG9jYWxcbiAgICAgICk7XG5cbiAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xuICAgICAgICBpZiAoIWVycm9yICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICAgIC8vIHtcbiAgICAgICAgICAvLyAgICBcImlkXCI6XCJhZmVjZDcyYTcyZmMyZjgxNWFjYTRlN2ZkNDFiZmQwMWYyZTU5MjJjZDVmYjQzYTA0NDE2ZTdlMjkxYTJiMTIwXCIsXG4gICAgICAgICAgLy8gICAgXCJwYXJlbnRcIjpcIjBmM2M1YzgwMjhmYmFiOGJkOTNhZWM0MDZkY2Q0ZGNlMjMyOTY4OTRhYmNmMmNhOTNiZGU0MDgzNDg5MjZmNjVcIixcbiAgICAgICAgICAvLyAgICBcImNyZWF0ZWRcIjpcIjIwMTQtMDctMTVUMDA6NDY6MzkuNzM2NzE5NjM3WlwiLFxuICAgICAgICAgIC8vICAgIFwiY29udGFpbmVyXCI6XCI3NzU2MWEzZDlmZDdkMTlmOGJkYzI1YjYzMzg2OGQ1ZWE5ZTU0YjMxZDViZmI0OGI4NzEzNjUwYWZiM2JjZTI1XCIsXG4gICAgICAgICAgLy8gICAgXCJjb250YWluZXJfY29uZmlnXCI6e1xuICAgICAgICAgIC8vICAgICAgIFwiSG9zdG5hbWVcIjpcImMwYzQ3MzRkYTc1NFwiLFxuICAgICAgICAgIC8vICAgICAgIC4uLlxuICAgICAgICAgIC8vICAgIH0sXG4gICAgICAgICAgLy8gICAgXCJkb2NrZXJfdmVyc2lvblwiOlwiMS4xLjBcIixcbiAgICAgICAgICAvLyAgICBcImF1dGhvclwiOlwiRXZlcnRvbiBSaWJlaXJvIFxcdTAwM2NudXhsbGlAZ21haWwuY29tXFx1MDAzZVwiLFxuICAgICAgICAgIC8vICAgIFwiY29uZmlnXCI6e1xuICAgICAgICAgIC8vICAgICAgIFwiSG9zdG5hbWVcIjpcImMwYzQ3MzRkYTc1NFwiLFxuICAgICAgICAgIC8vICAgICAgIC4uLlxuICAgICAgICAgIC8vICAgIH0sXG4gICAgICAgICAgLy8gICAgXCJhcmNoaXRlY3R1cmVcIjpcImFtZDY0XCIsXG4gICAgICAgICAgLy8gICAgXCJvc1wiOlwibGludXhcIixcbiAgICAgICAgICAvLyAgICBcIlNpemVcIjowXG4gICAgICAgICAgLy8gfVxuICAgICAgICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICAgIGxvZy5kZWJ1ZygnXFxuXFxuOjogZG9ja2VyLXJlZ2lzdHJ5IC0gaW1hZ2VKc29uIDo6Jyk7XG4gICAgICAgICAgbG9nLmRlYnVnKHJlc3VsdCk7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9XG5cbiAgYWxsQW5zY2VzdG9yQnlUYWcoaHViUmVzdWx0LCB0YWcpIHtcbiAgICByZXR1cm4gUS5hc3luYyhmdW5jdGlvbiogKCkge1xuICAgICAgbG9nLmRlYnVnKCdcXG5cXG46OiBkb2NrZXItcmVnaXN0cnkgLSBhbGxBbnNjZXN0b3JCeVRhZyA6OicpO1xuICAgICAgbG9nLmRlYnVnKCdlbmRwb2ludDonLCBodWJSZXN1bHQuZW5kcG9pbnQpO1xuICAgICAgbG9nLmRlYnVnKCd0b2tlbjonLCBodWJSZXN1bHQudG9rZW4pO1xuICAgICAgbG9nLmRlYnVnKCduYW1lc3BhY2U6JywgaHViUmVzdWx0Lm5hbWVzcGFjZSk7XG4gICAgICBsb2cuZGVidWcoJ3JlcG9zaXRvcnk6JywgaHViUmVzdWx0LnJlcG9zaXRvcnkpO1xuICAgICAgbG9nLmRlYnVnKCd0YWc6JywgdGFnKTtcbiAgICAgIGxvZy5kZWJ1ZygnPj4tLS0tLS0tLS0tLS0nKTtcblxuICAgICAgLy8gZ2V0IGltYWdlSWQgZnJvbSB0YWdcbiAgICAgIHZhciBpbWFnZUlkID0geWllbGQgdGhpcy5nZXRJbWFnZUlkQnlUYWcoaHViUmVzdWx0LCB0YWcpO1xuICAgICAgLy9nZXQgYWxsIGFuc2Nlc3RvcnNcbiAgICAgIHZhciBhbnNjZXN0b3JzID0geWllbGQgdGhpcy5hbmNlc3RyeShodWJSZXN1bHQsIGltYWdlSWQpO1xuXG4gICAgICByZXR1cm4gYW5zY2VzdG9ycztcbiAgICB9LmJpbmQodGhpcykpKCk7XG4gIH1cblxuICBkb3dubG9hZEltYWdlR2V0U2l6ZShodWJSZXN1bHQsIGltYWdlSWQpIHtcbiAgICB2YXIgcmVxdWVzdF9vcHRpb25zX2xvY2FsID0gdGhpcy5fX3JlcXVlc3Rfb3B0aW9ucztcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cbiAgICAgIHZhciBvcHRpb25zID0gXy5hc3NpZ24oe1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vJyArIGh1YlJlc3VsdC5lbmRwb2ludCArICcvdjEvaW1hZ2VzLycgKyBpbWFnZUlkICsgJy9sYXllcicsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnVG9rZW4gJyArIGh1YlJlc3VsdC50b2tlblxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0X29wdGlvbnNfbG9jYWxcbiAgICAgICk7XG5cbiAgICAgIHZhciByID0gcmVxdWVzdChvcHRpb25zKS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgbG9nLmRlYnVnKCdcXG5cXG46OiBkb2NrZXItcmVnaXN0cnkgLSBkb3dubG9hZEltYWdlR2V0U2l6ZSBoZWFkZXJzIDo6Jyk7XG4gICAgICAgIGxvZy5kZWJ1ZygnSUQ6ICAnLCBpbWFnZUlkKTtcbiAgICAgICAgdmFyIGxlbiA9IHBhcnNlSW50KHJlcy5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddLCAxMCk7XG4gICAgICAgIGxvZy5kZWJ1ZygncmVzLmhlYWRlcnM6JywgcmVzLmhlYWRlcnMpO1xuICAgICAgICBsb2cuZGVidWcoJ3NpemU6JywgcHJldHR5Qnl0ZXMobGVuKSk7XG4gICAgICAgIHIuYWJvcnQoKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgbGVuKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBkb3dubG9hZEltYWdlKGh1YlJlc3VsdCwgb3V0cHV0UGF0aCwgaW1hZ2VJZCwgaVByb2dyZXNzKSB7XG4gICAgdmFyIHJlcXVlc3Rfb3B0aW9uc19sb2NhbCA9IHRoaXMuX19yZXF1ZXN0X29wdGlvbnM7XG4gICAgcmV0dXJuIG5ldyBRLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUvKiwgcmVqZWN0Ki8pIHtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBfLmFzc2lnbih7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly8nICsgaHViUmVzdWx0LmVuZHBvaW50ICsgJy92MS9pbWFnZXMvJyArIGltYWdlSWQgKyAnL2xheWVyJyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdUb2tlbiAnICsgaHViUmVzdWx0LnRva2VuXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtZXRob2Q6ICdHRVQnXG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVlc3Rfb3B0aW9uc19sb2NhbFxuICAgICAgKTtcblxuICAgICAgLy8gSFRUUCBHRVQgUmVxdWVzdCAtPiBvdXRwdXRGaWxlXG4gICAgICByZXF1ZXN0KG9wdGlvbnMpXG4gICAgICAgIC5vbigncmVzcG9uc2UnLCBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICBsb2cuZGVidWcoJ1xcblxcbjo6IGRvY2tlci1yZWdpc3RyeSAtIGRvd25sb2FkSW1hZ2UgaGVhZGVycyA6OicpO1xuICAgICAgICAgIGxvZy5kZWJ1ZyhyZXMuaGVhZGVycyk7XG5cbiAgICAgICAgICByZXMub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgICAgIGlmIChpUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgaVByb2dyZXNzKGNodW5rLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXMub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc29sdmUob3V0cHV0UGF0aCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5waXBlKGZzLmNyZWF0ZVdyaXRlU3RyZWFtKG91dHB1dFBhdGgpKTtcblxuICAgIH0pO1xuICB9XG5cbiAgLy8gaHR0cDovL2RvY3MuZG9ja2VyLmNvbS9yZWZlcmVuY2UvYXBpL2RvY2tlcl9yZW1vdGVfYXBpX3YxLjE2LyNsb2FkLWEtdGFyYmFsbC13aXRoLWEtc2V0LW9mLWltYWdlcy1hbmQtdGFncy1pbnRvLWRvY2tlclxuICBwcmVwYXJlTG9hZGluZyhodWJSZXN1bHQsIG91dHB1dFBhdGgsIGltYWdlSWQsIGlQcm9ncmVzcykge1xuICAgIHJldHVybiBRLmFzeW5jKGZ1bmN0aW9uKiAoKSB7XG4gICAgICAvLyBBbiBpbWFnZSB0YXJiYWxsIGNvbnRhaW5zIG9uZSBkaXJlY3RvcnkgcGVyIGltYWdlIGxheWVyIChuYW1lZCB1c2luZyBpdHMgbG9uZyBJRClcbiAgICAgIHZhciBvdXRwdXRMb2FkUGF0aCA9IHBhdGguam9pbihvdXRwdXRQYXRoLCBpbWFnZUlkKTtcbiAgICAgIHlpZWxkIGZzSGVscGVyLmNyZWF0ZUNsZWFuRm9sZGVyKG91dHB1dExvYWRQYXRoKTtcblxuICAgICAgLy8gVkVSU0lPTjogY3VycmVudGx5IDEuMCAtIHRoZSBmaWxlIGZvcm1hdCB2ZXJzaW9uXG4gICAgICB2YXIgdmVyc2lvbkZpbGVQYXRoID0gcGF0aC5qb2luKG91dHB1dExvYWRQYXRoLCBcIlZFUlNJT05cIik7XG4gICAgICB5aWVsZCBRLm5mY2FsbChmcy53cml0ZUZpbGUsIHZlcnNpb25GaWxlUGF0aCwgXCIxLjBcIik7XG5cbiAgICAgIC8vIGpzb246IGRldGFpbGVkIGxheWVyIGluZm9ybWF0aW9uLCBzaW1pbGFyIHRvIGRvY2tlciBpbnNwZWN0IGxheWVyX2lkXG4gICAgICB2YXIganNvblJlc3VsdCA9IHlpZWxkIHRoaXMuaW1hZ2VKc29uKGh1YlJlc3VsdCwgaW1hZ2VJZCk7XG4gICAgICB2YXIganNvbkZpbGVQYXRoID0gcGF0aC5qb2luKG91dHB1dExvYWRQYXRoLCBcImpzb25cIik7XG4gICAgICB5aWVsZCBRLm5mY2FsbChmcy53cml0ZUZpbGUsIGpzb25GaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkoanNvblJlc3VsdCwgJyAnLCAzKSk7XG5cbiAgICAgIC8vIGxheWVyLnRhcjogQSB0YXJmaWxlIGNvbnRhaW5pbmcgdGhlIGZpbGVzeXN0ZW0gY2hhbmdlcyBpbiB0aGlzIGxheWVyXG4gICAgICB2YXIgbGF5ZXJUYXJGaWxlUGF0aCA9IHBhdGguam9pbihvdXRwdXRMb2FkUGF0aCwgXCJsYXllci50YXJcIik7XG4gICAgICB5aWVsZCB0aGlzLmRvd25sb2FkSW1hZ2UoaHViUmVzdWx0LCBsYXllclRhckZpbGVQYXRoLCBpbWFnZUlkLCBpUHJvZ3Jlc3MpO1xuXG4gICAgICAvLyBjcmVhdGUgdGFyIGZpbGVcbiAgICAgIHlpZWxkIGZzSGVscGVyLnRhclBhY2sob3V0cHV0TG9hZFBhdGgsIHBhdGguam9pbihvdXRwdXRMb2FkUGF0aCwgJy4uJywgaW1hZ2VJZCArICcudGFyJykpO1xuXG4gICAgICAvLyByZW1vdmUgZm9sZGVyXG4gICAgICB5aWVsZCBmc0hlbHBlci5yZW1vdmVEaXJSZWN1cnNpdmUob3V0cHV0TG9hZFBhdGgpO1xuXG4gICAgICByZXR1cm4gb3V0cHV0TG9hZFBhdGg7XG4gICAgfS5iaW5kKHRoaXMpKSgpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGdldCBkZWZhdWx0KCkgeyByZXR1cm4gRG9ja2VyUmVnaXN0cnk7IH1cbn07XG4iLCIoJF9fcGxhY2Vob2xkZXJfXzAgPSByZXF1aXJlKCRfX3BsYWNlaG9sZGVyX18xKSwgXG4gICAgICAgICRfX3BsYWNlaG9sZGVyX18yICYmICRfX3BsYWNlaG9sZGVyX18zLl9fZXNNb2R1bGUgJiYgJF9fcGxhY2Vob2xkZXJfXzQgfHwge2RlZmF1bHQ6ICRfX3BsYWNlaG9sZGVyX181fSkiLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIpIiwiJHRyYWNldXJSdW50aW1lLmluaXRHZW5lcmF0b3JGdW5jdGlvbigkX19wbGFjZWhvbGRlcl9fMCkiLCJyZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzAoXG4gICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18xLFxuICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiwgdGhpcyk7IiwiJHRyYWNldXJSdW50aW1lLmNyZWF0ZUdlbmVyYXRvckluc3RhbmNlIiwiZnVuY3Rpb24oJGN0eCkge1xuICAgICAgd2hpbGUgKHRydWUpICRfX3BsYWNlaG9sZGVyX18wXG4gICAgfSIsInJldHVybiAkX19wbGFjZWhvbGRlcl9fMCIsIiRjdHguc2VudCIsIiRjdHgucmV0dXJuVmFsdWUgPSAkX19wbGFjZWhvbGRlcl9fMCIsInJldHVybiAkY3R4LmVuZCgpIiwiJGN0eC5tYXliZVRocm93KCkiXX0=