"use strict";
var Q = require('q');
var fs = require('fs');
var FS = require("q-io/fs");
var rmdir = require('rimraf');
var FsHelper = function FsHelper() {};
($traceurRuntime.createClass)(FsHelper, {
  removeDirRecursive: function(dir) {
    return new Q.Promise(function(resolve, reject) {
      rmdir(dir, function(err) {
        if (err) {
          reject(err);
        } else {
          resolve(true);
        }
      });
    });
  },
  createCleanFolder: function(fullPath) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__1() {
      var $__2,
          $__3,
          $__4;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__2 = this.fsExists;
              $__3 = $__2.call(this, fullPath);
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return $__3;
            case 2:
              $__4 = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = ($__4) ? 7 : 10;
              break;
            case 7:
              $ctx.state = 8;
              return this.removeDirRecursive(fullPath);
            case 8:
              $ctx.maybeThrow();
              $ctx.state = 10;
              break;
            case 10:
              $ctx.state = 13;
              return FS.makeTree(fullPath);
            case 13:
              $ctx.maybeThrow();
              $ctx.state = 15;
              break;
            case 15:
              $ctx.returnValue = fullPath;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__1, this);
    }).bind(this))();
  },
  createFolder: function(fullPath) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__1() {
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return FS.makeTree(fullPath);
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 4:
              $ctx.returnValue = fullPath;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__1, this);
    }).bind(this))();
  },
  fsExists: function(fullPath) {
    return new Q.Promise(function(resolve, reject) {
      try {
        fs.exists(fullPath, function(result) {
          resolve(result);
        });
      } catch (err) {
        reject(err);
      }
    }.bind(this));
  },
  tarPack: function(folderToPack, outputTarfile) {
    return new Q.Promise(function(resolve, reject) {
      try {
        var write = fs.createWriteStream;
        var pack = require('tar-pack').pack;
        pack(folderToPack).pipe(write(outputTarfile)).on('error', function(err) {
          reject(err);
        }).on('close', function() {
          resolve(true);
        });
      } catch (err) {
        reject(err);
      }
    }.bind(this));
  }
}, {});
module.exports = {
  __esModule: true,
  get default() {
    return FsHelper;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZzLWhlbHBlci9pbmRleC5qcyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci85IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEwIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzgiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8yIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8zIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzE2IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzExIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzE1IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxBQUFJLEVBQUEsQ0FBQSxDQUFBLEVBQVEsQ0FBQSxPQUFNLEFBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQztBQUN4QixBQUFJLEVBQUEsQ0FBQSxFQUFDLEVBQU8sQ0FBQSxPQUFNLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUN6QixBQUFJLEVBQUEsQ0FBQSxFQUFDLEVBQU8sQ0FBQSxPQUFNLEFBQUMsQ0FBQyxTQUFRLENBQUMsQ0FBQztBQUM5QixBQUFJLEVBQUEsQ0FBQSxLQUFJLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQ0g3QixBQUFJLEVBQUEsV0RLSixTQUFNLFNBQU8sS0NMMkIsQURxRXhDLENDckV3QztBQ0F4QyxBQUFDLGVBQWMsWUFBWSxDQUFDLEFBQUM7QUZPM0IsbUJBQWlCLENBQWpCLFVB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QVcsQ0FBRyxDQUFBLGFBQVksQ0FBRztBQUNuQyxTQUFPLElBQUksQ0FBQSxDQUFBLFFBQVEsQUFBQyxDQUFDLFNBQVUsT0FBTSxDQUFHLENBQUEsTUFBSyxDQUFHO0FBQzlDLFFBQUk7QUFDRixBQUFJLFVBQUEsQ0FBQSxLQUFJLEVBQUksQ0FBQSxFQUFDLGtCQUFrQixDQUFDO0FBQ2hDLEFBQUksVUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxLQUFLLENBQUM7QUFDbkMsV0FBRyxBQUFDLENBQUMsWUFBVyxDQUFDLEtBQ1gsQUFBQyxDQUFDLEtBQUksQUFBQyxDQUFDLGFBQVksQ0FBQyxDQUFDLEdBQ3hCLEFBQUMsQ0FBQyxPQUFNLENBQUcsVUFBVSxHQUFFLENBQUc7QUFDMUIsZUFBSyxBQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7UUFDYixDQUFDLEdBQ0MsQUFBQyxDQUFDLE9BQU0sQ0FBRyxVQUFTLEFBQUMsQ0FBRTtBQUN2QixnQkFBTSxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7UUFDZixDQUFDLENBQUM7TUFDTixDQUFFLE9BQU8sR0FBRSxDQUFHO0FBQ1osYUFBSyxBQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7TUFDYjtBQUFBLElBQ0YsS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQztFQUVmO0FBQUEsS0VwRW1GO0FGdUVyRixLQUFLLFFBQVEsRUFBSTtBQUNmLFdBQVMsQ0FBRyxLQUFHO0FBQ2YsSUFBSSxRQUFNLEVBQUk7QUFBRSxTQUFPLFNBQU8sQ0FBQztFQUFFO0FBQUEsQUFDbkMsQ0FBQztBQUNEIiwiZmlsZSI6ImZzLWhlbHBlci9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXNDb250ZW50IjpbInZhciBRICAgICA9IHJlcXVpcmUoJ3EnKTtcbnZhciBmcyAgICA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgRlMgICAgPSByZXF1aXJlKFwicS1pby9mc1wiKTtcbnZhciBybWRpciA9IHJlcXVpcmUoJ3JpbXJhZicpO1xuXG5jbGFzcyBGc0hlbHBlciB7XG5cbiAgcmVtb3ZlRGlyUmVjdXJzaXZlKGRpcikge1xuICAgIHJldHVybiBuZXcgUS5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJtZGlyKGRpciwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZUNsZWFuRm9sZGVyKGZ1bGxQYXRoKSB7XG4gICAgcmV0dXJuIFEuYXN5bmMoZnVuY3Rpb24qICgpIHtcbiAgICAgIGlmICggeWllbGQgdGhpcy5mc0V4aXN0cyhmdWxsUGF0aCkgKSB7XG4gICAgICAgIC8vIHJlbW92ZSBmb2xkZXIgaWYgZXhpc3RzXG4gICAgICAgIHlpZWxkIHRoaXMucmVtb3ZlRGlyUmVjdXJzaXZlKGZ1bGxQYXRoKTtcbiAgICAgIH1cbiAgICAgIHlpZWxkIEZTLm1ha2VUcmVlKGZ1bGxQYXRoKTtcbiAgICAgIHJldHVybiBmdWxsUGF0aDtcbiAgICB9LmJpbmQodGhpcykpKCk7XG4gIH1cblxuICBjcmVhdGVGb2xkZXIoZnVsbFBhdGgpIHtcbiAgICByZXR1cm4gUS5hc3luYyhmdW5jdGlvbiogKCkge1xuICAgICAgeWllbGQgRlMubWFrZVRyZWUoZnVsbFBhdGgpO1xuICAgICAgcmV0dXJuIGZ1bGxQYXRoO1xuICAgIH0uYmluZCh0aGlzKSkoKTtcbiAgfVxuXG4gIGZzRXhpc3RzKGZ1bGxQYXRoKSB7XG4gICAgcmV0dXJuIG5ldyBRLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZnMuZXhpc3RzKGZ1bGxQYXRoLCBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgfVxuXG4gIHRhclBhY2soZm9sZGVyVG9QYWNrLCBvdXRwdXRUYXJmaWxlKSB7XG4gICAgcmV0dXJuIG5ldyBRLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHdyaXRlID0gZnMuY3JlYXRlV3JpdGVTdHJlYW07XG4gICAgICAgIHZhciBwYWNrID0gcmVxdWlyZSgndGFyLXBhY2snKS5wYWNrO1xuICAgICAgICBwYWNrKGZvbGRlclRvUGFjaylcbiAgICAgICAgICAucGlwZSh3cml0ZShvdXRwdXRUYXJmaWxlKSlcbiAgICAgICAgICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcykpO1xuXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGdldCBkZWZhdWx0KCkgeyByZXR1cm4gRnNIZWxwZXI7IH1cbn07XG4iLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIpIiwiJHRyYWNldXJSdW50aW1lLmluaXRHZW5lcmF0b3JGdW5jdGlvbigkX19wbGFjZWhvbGRlcl9fMCkiLCJyZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzAoXG4gICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18xLFxuICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiwgdGhpcyk7IiwiJHRyYWNldXJSdW50aW1lLmNyZWF0ZUdlbmVyYXRvckluc3RhbmNlIiwiZnVuY3Rpb24oJGN0eCkge1xuICAgICAgd2hpbGUgKHRydWUpICRfX3BsYWNlaG9sZGVyX18wXG4gICAgfSIsInJldHVybiAkX19wbGFjZWhvbGRlcl9fMCIsIiRjdHguc2VudCIsIiRjdHguc3RhdGUgPSAoJF9fcGxhY2Vob2xkZXJfXzApID8gJF9fcGxhY2Vob2xkZXJfXzEgOiAkX19wbGFjZWhvbGRlcl9fMjtcbiAgICAgICAgYnJlYWsiLCIkY3R4Lm1heWJlVGhyb3coKSIsIiRjdHgucmV0dXJuVmFsdWUgPSAkX19wbGFjZWhvbGRlcl9fMCIsInJldHVybiAkY3R4LmVuZCgpIl19