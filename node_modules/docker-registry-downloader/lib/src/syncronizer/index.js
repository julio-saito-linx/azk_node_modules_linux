"use strict";
var $___46__46__47_docker_45_hub__,
    $___46__46__47_docker_45_registry__,
    $___46__46__47_docker_45_remote__,
    $___46__46__47_fs_45_helper__;
var DockerHub = ($___46__46__47_docker_45_hub__ = require("../docker-hub"), $___46__46__47_docker_45_hub__ && $___46__46__47_docker_45_hub__.__esModule && $___46__46__47_docker_45_hub__ || {default: $___46__46__47_docker_45_hub__}).default;
var DockerRegistry = ($___46__46__47_docker_45_registry__ = require("../docker-registry"), $___46__46__47_docker_45_registry__ && $___46__46__47_docker_45_registry__.__esModule && $___46__46__47_docker_45_registry__ || {default: $___46__46__47_docker_45_registry__}).default;
var DockerRemote = ($___46__46__47_docker_45_remote__ = require("../docker-remote"), $___46__46__47_docker_45_remote__ && $___46__46__47_docker_45_remote__.__esModule && $___46__46__47_docker_45_remote__ || {default: $___46__46__47_docker_45_remote__}).default;
var FsHelper = ($___46__46__47_fs_45_helper__ = require("../fs-helper"), $___46__46__47_fs_45_helper__ && $___46__46__47_fs_45_helper__.__esModule && $___46__46__47_fs_45_helper__ || {default: $___46__46__47_fs_45_helper__}).default;
var path = require('path');
var Q = require('q');
var log = require('../helpers/logger');
var _ = require('lodash');
var prettyBytes = require('pretty-bytes');
var async = require('async');
var ProgressBar = require('progress');
var os = require('os');
var fsHelper = new FsHelper();
Q.onerror = function(title, err) {
  log.error('\n\n', title, err);
  throw err;
};
var Syncronizer = function Syncronizer(dockerode_options, request_options) {
  this.dockerHub = new DockerHub(request_options);
  this.dockerRegistry = new DockerRegistry(request_options);
  this.dockerRemote = new DockerRemote(dockerode_options);
};
($traceurRuntime.createClass)(Syncronizer, {
  compare: function(hubResult, tag) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var imageId,
          registryAncestors,
          fullTagName,
          imagesFound,
          localAncestors,
          localImageInspectors,
          localIds,
          diff;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return this.dockerRegistry.getImageIdByTag(hubResult, tag);
            case 2:
              imageId = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = 6;
              return this.dockerRegistry.ancestry(hubResult, imageId);
            case 6:
              registryAncestors = $ctx.sent;
              $ctx.state = 8;
              break;
            case 8:
              log.info('  registry layers count:', registryAncestors.length);
              fullTagName = hubResult.namespace + '/' + hubResult.repository + ':' + tag;
              if (hubResult.namespace === 'library') {
                fullTagName = hubResult.repository + ':' + tag;
              }
              $ctx.state = 25;
              break;
            case 25:
              $ctx.state = 10;
              return this.dockerRemote.searchImagesByTag(fullTagName);
            case 10:
              imagesFound = $ctx.sent;
              $ctx.state = 12;
              break;
            case 12:
              $ctx.state = (!imagesFound || imagesFound.length === 0) ? 15 : 14;
              break;
            case 15:
              log.debug('\n\n:: syncronizer - compare - no local image for ' + fullTagName + ' ::');
              log.debug(registryAncestors);
              log.info('  local layers found   :', 0);
              $ctx.state = 16;
              break;
            case 16:
              $ctx.returnValue = registryAncestors;
              $ctx.state = -2;
              break;
            case 14:
              $ctx.state = 19;
              return this.dockerRemote.anscestors(imagesFound[0].Id);
            case 19:
              localAncestors = $ctx.sent;
              $ctx.state = 21;
              break;
            case 21:
              log.info('    local layers found:', localAncestors.length);
              localImageInspectors = _.pluck(localAncestors, 'imageInspect');
              localIds = _.pluck(localImageInspectors, 'Id');
              diff = _.difference(registryAncestors, localIds);
              log.debug('\n\n:: syncronizer - compare registryAncestors ::');
              log.debug(registryAncestors);
              log.debug('\n\n:: syncronizer - compare localIds ::');
              log.debug(localIds);
              log.debug('\n\n:: syncronizer - compare diff ::');
              log.debug(diff);
              log.info('    diff images:', diff.length);
              $ctx.state = 27;
              break;
            case 27:
              $ctx.returnValue = diff;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  },
  getSizes: function(hubResult, layersList) {
    return new Q.Promise(function(resolve, reject) {
      try {
        var allChecks = [];
        for (var i = 0; i < layersList.length; i++) {
          var layerID = layersList[i];
          allChecks.push(this.dockerRegistry.downloadImageGetSize(hubResult, layerID));
        }
        async.parallelLimit(allChecks, 10, function(err, results) {
          if (err) {
            return reject(err);
          }
          var totalSize = _.reduce(results, function(sum, num) {
            return sum + num;
          }, 0);
          log.debug('\n\n:: syncronizer - getSizes ::');
          log.debug('layers:', layersList.length);
          return resolve(totalSize);
        });
      } catch (err) {
        log.error(err.stack);
        reject(err);
      }
    }.bind(this));
  },
  checkDownloadedFiles: function(layersList, outputPath) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var layerToDownload,
          i,
          layerID,
          filename,
          fileExists;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              layerToDownload = [];
              $ctx.state = 15;
              break;
            case 15:
              i = 0;
              $ctx.state = 11;
              break;
            case 11:
              $ctx.state = (i < layersList.length) ? 5 : 9;
              break;
            case 8:
              i++;
              $ctx.state = 11;
              break;
            case 5:
              layerID = layersList[i];
              filename = path.join(outputPath, layerID + '.tar');
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return fsHelper.fsExists(filename);
            case 2:
              fileExists = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              if (!fileExists) {
                layerToDownload.push(layerID);
              }
              $ctx.state = 8;
              break;
            case 9:
              $ctx.returnValue = layerToDownload;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  },
  downloadCallback: function(hubResult, outputPath, imageId, iProgress) {
    return function(callback) {
      try {
        Q.spawn($traceurRuntime.initGeneratorFunction(function $__5() {
          var $__6,
              $__7,
              $__8,
              $__9,
              $__10;
          return $traceurRuntime.createGeneratorInstance(function($ctx) {
            while (true)
              switch ($ctx.state) {
                case 0:
                  $__6 = this.dockerRegistry;
                  $__7 = $__6.prepareLoading;
                  $__8 = $__7.call($__6, hubResult, outputPath, imageId, iProgress);
                  $ctx.state = 6;
                  break;
                case 6:
                  $ctx.state = 2;
                  return $__8;
                case 2:
                  $__9 = $ctx.sent;
                  $ctx.state = 4;
                  break;
                case 4:
                  $__10 = callback(null, $__9);
                  $ctx.state = -2;
                  break;
                default:
                  return $ctx.end();
              }
          }, $__5, this);
        }).bind(this));
      } catch (err) {
        log.error(err.stack);
      }
    }.bind(this);
  },
  loadCallback: function(hubResult, outputPath, imageId, iProgress) {
    return function(callback) {
      Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
        var result;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                $ctx.state = 2;
                return this.dockerRemote.loadImage(outputPath, imageId);
              case 2:
                result = $ctx.sent;
                $ctx.state = 4;
                break;
              case 4:
                if (iProgress) {
                  iProgress(1);
                }
                callback(null, result);
                $ctx.state = -2;
                break;
              default:
                return $ctx.end();
            }
        }, $__5, this);
      }).bind(this))();
    }.bind(this);
  },
  downloadList: function(hubResult, outputPath, imageIdList, iProgress) {
    return new Q.Promise(function(resolve, reject) {
      try {
        var allDownloads = [];
        for (var i = (imageIdList.length - 1); i >= 0; i--) {
          var layerID = imageIdList[i];
          allDownloads.push(this.downloadCallback(hubResult, outputPath, layerID, iProgress));
        }
        async.parallelLimit(allDownloads, 6, function(err, results) {
          log.debug('\n\n:: syncronizer - downloadAndLoadList ::');
          log.debug('outputs:', results);
          resolve(results);
        });
      } catch (err) {
        log.error(err.stack);
        reject(err);
      }
    }.bind(this));
  },
  loadList: function(hubResult, outputPath, imageIdList, iProgress) {
    return new Q.Promise(function(resolve, reject) {
      try {
        var allLoads = [];
        for (var i = (imageIdList.length - 1); i >= 0; i--) {
          var layerID = imageIdList[i];
          allLoads.push(this.loadCallback(hubResult, outputPath, layerID, iProgress));
        }
        async.parallelLimit(allLoads, 1, function(err, results) {
          log.debug('\n\n:: syncronizer - downloadAndLoadList ::');
          log.debug('outputs:', results);
          return resolve(results);
        });
      } catch (err) {
        log.error(err.stack);
        reject(err);
      }
    }.bind(this));
  },
  setTags: function(hubResult) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var tags,
          results,
          $__11,
          $__12,
          $__13,
          $__14,
          name,
          tagName,
          imageId,
          result;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return this.dockerRegistry.tags(hubResult);
            case 2:
              tags = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              results = [];
              $ctx.state = 27;
              break;
            case 27:
              $__11 = [];
              $__12 = tags;
              for ($__13 in $__12)
                $__11.push($__13);
              $ctx.state = 23;
              break;
            case 23:
              $__14 = 0;
              $ctx.state = 21;
              break;
            case 21:
              $ctx.state = ($__14 < $__11.length) ? 17 : 19;
              break;
            case 12:
              $__14++;
              $ctx.state = 21;
              break;
            case 17:
              name = $__11[$__14];
              $ctx.state = 18;
              break;
            case 18:
              $ctx.state = (!(name in $__12)) ? 12 : 15;
              break;
            case 15:
              $ctx.state = (tags.hasOwnProperty(name)) ? 9 : 12;
              break;
            case 9:
              tagName = name;
              imageId = tags[name];
              log.debug('\n\n:: syncronizer - setTag - search image ::');
              log.debug(tagName, imageId);
              $ctx.state = 10;
              break;
            case 10:
              $ctx.state = 6;
              return this.dockerRemote.setImageTag(hubResult.namespace, hubResult.repository, imageId, tagName);
            case 6:
              result = $ctx.sent;
              $ctx.state = 8;
              break;
            case 8:
              results.push(result);
              $ctx.state = 12;
              break;
            case 19:
              $ctx.returnValue = results;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  },
  sync: function(hubResult, tag, outputPath, forceOverwrite) {
    var progressMessage,
        bar,
        iProgress;
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var imageFullName,
          totalLayersToLoad,
          diffFilesToDownload,
          totalSize;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = (!outputPath) ? 5 : 4;
              break;
            case 5:
              outputPath = this.getOsTempDir();
              log.info('creating temp folder', outputPath);
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return this.createAndCleanTempDir(outputPath);
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 4:
              imageFullName = hubResult.namespace + '/' + hubResult.repository + ':' + tag;
              log.info('syncing', imageFullName);
              log.info('  comparing docker registry with local images...');
              $ctx.state = 44;
              break;
            case 44:
              $ctx.state = 9;
              return this.compare(hubResult, tag);
            case 9:
              totalLayersToLoad = $ctx.sent;
              $ctx.state = 11;
              break;
            case 11:
              log.info('  getting total size...');
              $ctx.state = 46;
              break;
            case 46:
              $ctx.state = (forceOverwrite) ? 18 : 16;
              break;
            case 18:
              log.info('  (force overwrite is active)...');
              diffFilesToDownload = totalLayersToLoad;
              $ctx.state = 19;
              break;
            case 16:
              log.info('  checking already downloaded files...');
              $ctx.state = 17;
              break;
            case 17:
              $ctx.state = 13;
              return this.checkDownloadedFiles(totalLayersToLoad, outputPath);
            case 13:
              diffFilesToDownload = $ctx.sent;
              $ctx.state = 19;
              break;
            case 19:
              $ctx.state = 22;
              return this.getSizes(hubResult, diffFilesToDownload);
            case 22:
              totalSize = $ctx.sent;
              $ctx.state = 24;
              break;
            case 24:
              $ctx.state = (totalSize > 0) ? 31 : 28;
              break;
            case 31:
              $ctx.state = (diffFilesToDownload.length > 0) ? 29 : 28;
              break;
            case 29:
              log.info('  downloading ' + diffFilesToDownload.length + ' layers ' + prettyBytes(totalSize) + '...');
              progressMessage = '        [:bar] :percent ( time elapsed: :elapsed seconds )';
              bar = new ProgressBar(progressMessage, {
                complete: '=',
                incomplete: ' ',
                width: 23,
                total: totalSize
              });
              iProgress = function(chunkSize) {
                bar.tick(chunkSize);
              };
              $ctx.state = 30;
              break;
            case 30:
              $ctx.state = 26;
              return this.downloadList(hubResult, outputPath, diffFilesToDownload, iProgress);
            case 26:
              $ctx.maybeThrow();
              $ctx.state = 28;
              break;
            case 28:
              log.info('  download folder: `' + outputPath + '`');
              log.info('  loading ' + totalLayersToLoad.length + ' layers...');
              progressMessage = '        [:bar] :percent ( time elapsed: :elapsed seconds )';
              bar = new ProgressBar(progressMessage, {
                complete: '=',
                incomplete: ' ',
                width: 23,
                total: totalLayersToLoad.length
              });
              iProgress = function(num) {
                bar.tick(num);
              };
              $ctx.state = 48;
              break;
            case 48:
              $ctx.state = 34;
              return this.loadList(hubResult, outputPath, totalLayersToLoad, iProgress);
            case 34:
              $ctx.maybeThrow();
              $ctx.state = 36;
              break;
            case 36:
              log.info('  setting tags...');
              $ctx.state = 50;
              break;
            case 50:
              $ctx.state = 38;
              return this.setTags(hubResult);
            case 38:
              $ctx.maybeThrow();
              $ctx.state = 40;
              break;
            case 40:
              log.info('finished loading', imageFullName);
              $ctx.state = 52;
              break;
            case 52:
              $ctx.returnValue = true;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  },
  createAndCleanTempDir: function(dir) {
    return fsHelper.createCleanFolder(dir);
  },
  createTempDir: function(dir) {
    return fsHelper.createFolder(dir);
  },
  getOsTempDir: function(folderName) {
    var tempFolderName = folderName || 'docker-registry-downloader-temp';
    return path.join(os.tmpdir(), tempFolderName);
  },
  removeTempDir: function(dir) {
    return fsHelper.removeDirRecursive(dir);
  },
  getTotalSize: function(hubResult, tag) {
    return new Q.Promise(function(resolve, reject) {
      try {
        Q.spawn($traceurRuntime.initGeneratorFunction(function $__5() {
          var imageFullName,
              totalLayersToLoad,
              totalSize;
          return $traceurRuntime.createGeneratorInstance(function($ctx) {
            while (true)
              switch ($ctx.state) {
                case 0:
                  imageFullName = hubResult.namespace + '/' + hubResult.repository + ':' + tag;
                  log.info('comparing docker registry with local images...');
                  $ctx.state = 10;
                  break;
                case 10:
                  $ctx.state = 2;
                  return this.compare(hubResult, tag);
                case 2:
                  totalLayersToLoad = $ctx.sent;
                  $ctx.state = 4;
                  break;
                case 4:
                  log.info('getting total size', imageFullName);
                  $ctx.state = 12;
                  break;
                case 12:
                  $ctx.state = 6;
                  return this.getSizes(hubResult, totalLayersToLoad);
                case 6:
                  totalSize = $ctx.sent;
                  $ctx.state = 8;
                  break;
                case 8:
                  if (totalSize > 0 && totalLayersToLoad.length > 0) {
                    log.info('  layers to download: ' + totalLayersToLoad.length);
                    log.info('  total layers size : ' + prettyBytes(totalSize));
                  }
                  resolve({
                    layersCount: totalLayersToLoad.length,
                    totalSize: totalSize
                  });
                  $ctx.state = -2;
                  break;
                default:
                  return $ctx.end();
              }
          }, $__5, this);
        }).bind(this));
      } catch (err) {
        log.error(err.stack);
        reject(err);
      }
    }.bind(this));
  },
  getTotalLocalSize: function(hubResult, tag) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var fullTagName,
          imagesFound,
          localAncestors,
          total_local_size;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              fullTagName = hubResult.namespace + '/' + hubResult.repository + ':' + tag;
              if (hubResult.namespace === 'library') {
                fullTagName = hubResult.repository + ':' + tag;
              }
              $ctx.state = 15;
              break;
            case 15:
              $ctx.state = 2;
              return this.dockerRemote.searchImagesByTag(fullTagName);
            case 2:
              imagesFound = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = (!imagesFound || imagesFound.length === 0) ? 5 : 6;
              break;
            case 5:
              $ctx.returnValue = ({
                total_local_size: 0,
                localAncestors: [],
                imagesFound: imagesFound
              });
              $ctx.state = -2;
              break;
            case 6:
              $ctx.state = 9;
              return this.dockerRemote.anscestors(imagesFound[0].Id);
            case 9:
              localAncestors = $ctx.sent;
              $ctx.state = 11;
              break;
            case 11:
              total_local_size = _.reduce(localAncestors, function(sum, anscestor) {
                return sum + anscestor.imageInspect.Size;
              }, 0);
              log.debug('\n\n:: syncronizer - getTotalLocalSize ' + fullTagName + ' ::');
              log.debug(prettyBytes(total_local_size));
              $ctx.state = 17;
              break;
            case 17:
              $ctx.returnValue = ({
                total_local_size: total_local_size,
                localAncestors: localAncestors,
                imagesFound: imagesFound
              });
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  },
  getAllLayersFromRegistry: function(hubResult, tag) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var imageId,
          registryAncestors;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return this.dockerRegistry.getImageIdByTag(hubResult, tag);
            case 2:
              imageId = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = 6;
              return this.dockerRegistry.ancestry(hubResult, imageId);
            case 6:
              registryAncestors = $ctx.sent;
              $ctx.state = 8;
              break;
            case 8:
              $ctx.returnValue = ({
                hub_result: hubResult,
                image_id: imageId,
                registry_layers: registryAncestors
              });
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  },
  checkLocalLayer: function(image_id) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var image,
          inspected_image;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return this.dockerRemote.getImage(image_id);
            case 2:
              image = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = 6;
              return this.dockerRemote.inspectImage(image);
            case 6:
              inspected_image = $ctx.sent;
              $ctx.state = 8;
              break;
            case 8:
              $ctx.returnValue = inspected_image;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  },
  getLayersDiff: function(hubResult, tag) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var registry_result,
          registry_layers_ids,
          non_existent_locally_ids,
          i,
          registry_layer,
          local_layer;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return this.getAllLayersFromRegistry(hubResult, tag);
            case 2:
              registry_result = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              registry_layers_ids = registry_result.registry_layers;
              non_existent_locally_ids = [];
              $ctx.state = 19;
              break;
            case 19:
              i = 0;
              $ctx.state = 15;
              break;
            case 15:
              $ctx.state = (i < registry_layers_ids.length) ? 9 : 13;
              break;
            case 12:
              i++;
              $ctx.state = 15;
              break;
            case 9:
              registry_layer = registry_layers_ids[i];
              $ctx.state = 10;
              break;
            case 10:
              $ctx.state = 6;
              return this.checkLocalLayer(registry_layer);
            case 6:
              local_layer = $ctx.sent;
              $ctx.state = 8;
              break;
            case 8:
              if (!local_layer) {
                non_existent_locally_ids.push(registry_layer);
              }
              $ctx.state = 12;
              break;
            case 13:
              $ctx.returnValue = ({
                registry_layers_ids: registry_layers_ids,
                non_existent_locally_ids: non_existent_locally_ids
              });
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  },
  checkTotalLocalSizes: function(layers_id_list) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var sum_sizes,
          i,
          layer_id,
          local_layer;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              sum_sizes = 0;
              $ctx.state = 15;
              break;
            case 15:
              i = 0;
              $ctx.state = 11;
              break;
            case 11:
              $ctx.state = (i < layers_id_list.length) ? 5 : 9;
              break;
            case 8:
              i++;
              $ctx.state = 11;
              break;
            case 5:
              layer_id = layers_id_list[i];
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return this.checkLocalLayer(layer_id);
            case 2:
              local_layer = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              if (local_layer) {
                sum_sizes += local_layer.Size;
              }
              $ctx.state = 8;
              break;
            case 9:
              $ctx.returnValue = sum_sizes;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  },
  checkTotalLocalCount: function(layers_id_list) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__5() {
      var sum_count,
          i,
          layer_id,
          local_layer;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              sum_count = 0;
              $ctx.state = 15;
              break;
            case 15:
              i = 0;
              $ctx.state = 11;
              break;
            case 11:
              $ctx.state = (i < layers_id_list.length) ? 5 : 9;
              break;
            case 8:
              i++;
              $ctx.state = 11;
              break;
            case 5:
              layer_id = layers_id_list[i];
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return this.checkLocalLayer(layer_id);
            case 2:
              local_layer = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              if (local_layer) {
                sum_count = sum_count + 1;
              }
              $ctx.state = 8;
              break;
            case 9:
              $ctx.returnValue = sum_count;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__5, this);
    }).bind(this))();
  }
}, {});
module.exports = {
  __esModule: true,
  get default() {
    return Syncronizer;
  }
};

//# sourceMappingURL=data:application/json;base64,