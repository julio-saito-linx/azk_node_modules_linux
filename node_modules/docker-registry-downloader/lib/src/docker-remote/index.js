"use strict";
var Docker = require('dockerode');
var fs = require('fs');
var Q = require('q');
var log = require('../helpers/logger');
var path = require('path');
var _ = require('lodash');
var DockerRemote = function DockerRemote(dockerode_options) {
  if (dockerode_options && dockerode_options.dockerode_modem) {
    this.docker = new Docker();
    this.docker.modem = dockerode_options.dockerode_modem;
  } else {
    var socket = process.env.DOCKER_SOCKET || (dockerode_options && dockerode_options.socket_dockerode) || '/var/run/docker.sock';
    var stats = fs.statSync(socket);
    if (!stats.isSocket()) {
      throw new Error("Are you sure the docker is running?");
    }
    this.docker = new Docker({socketPath: socket});
  }
};
($traceurRuntime.createClass)(DockerRemote, {
  listActiveContainers: function() {
    return new Q.Promise(function(resolve, reject) {
      try {
        this.docker.listContainers({all: false}, function(err, containers) {
          log.debug('\n\n:: docker-remote - listActiveContainers ::');
          log.debug(containers);
          resolve(containers);
        });
      } catch (err) {
        log.error(err);
        reject(err);
      }
    }.bind(this));
  },
  listAllContainers: function() {
    return new Q.Promise(function(resolve, reject) {
      try {
        this.docker.listContainers({all: true}, function(err, containers) {
          log.debug('\n\n:: docker-remote - listAllContainers ::');
          log.debug(containers);
          resolve(containers);
        });
      } catch (err) {
        log.error(err);
        reject(err);
      }
    }.bind(this));
  },
  listImages: function() {
    return new Q.Promise(function(resolve, reject) {
      try {
        this.docker.listImages(function(err, data) {
          log.debug('\n\n:: docker-remote - listImages ::');
          log.debug(data);
          resolve(data);
        });
      } catch (err) {
        log.error(err);
        reject(err);
      }
    }.bind(this));
  },
  getImage: function(imageId) {
    return new Q.Promise(function(resolve, reject) {
      try {
        var image = this.docker.getImage(imageId);
        log.debug('\n\n:: docker-remote - image ::');
        log.debug(image);
        return resolve(image);
      } catch (err) {
        log.error(err);
        reject(err);
      }
    }.bind(this));
  },
  inspectImage: function(image) {
    return new Q.Promise(function(resolve, reject) {
      try {
        var handler = function(err, data) {
          if (err) {
            if (err.statusCode === 404) {
              return resolve(null);
            }
            return reject(err);
          }
          log.debug('\n\n:: docker-remote - image inspect ::');
          log.debug(data);
          return resolve(data);
        };
        image.inspect(handler);
      } catch (err) {
        reject(err);
      }
    }.bind(this));
  },
  removeImage: function(imageId) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__1() {
      var image,
          handler;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return this.getImage(imageId);
            case 2:
              image = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              handler = function(err, data) {
                if (err) {
                  throw err;
                }
                log.debug('\n\n:: docker-remote - removeImage ::');
                log.debug(data);
                return data;
              };
              image.remove(handler);
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__1, this);
    }).bind(this))();
  },
  searchImages: function(imageName) {
    return new Q.Promise(function(resolve, reject) {
      try {
        var handler = function(err, data) {
          if (err) {
            return reject(err);
          }
          log.debug('\n\n:: docker-remote - searchImages ::');
          log.debug(data);
          return resolve(data);
        };
        this.docker.searchImages({term: imageName}, handler);
      } catch (err) {
        reject(err);
      }
    }.bind(this));
  },
  searchImagesByTag: function(tagName) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__1() {
      var allImages,
          imagesFound;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return this.listImages();
            case 2:
              allImages = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              imagesFound = _.filter(allImages, function(image) {
                if (_.contains(image.RepoTags, tagName)) {
                  return image;
                }
              }, this);
              log.debug('\n\n:: docker-remote - searchImagesByTag ::');
              log.debug(imagesFound);
              $ctx.state = 8;
              break;
            case 8:
              $ctx.returnValue = imagesFound;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__1, this);
    }).bind(this))();
  },
  getParent: function(imageId) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__1() {
      var currentImage,
          imageInspect;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return this.getImage(imageId);
            case 2:
              currentImage = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = 6;
              return this.inspectImage(currentImage);
            case 6:
              imageInspect = $ctx.sent;
              $ctx.state = 8;
              break;
            case 8:
              $ctx.state = (imageInspect === null) ? 11 : 10;
              break;
            case 11:
              log.debug('\n\n:: docker-remote - getParent ::');
              log.debug('image not found: ' + imageId);
              $ctx.state = 12;
              break;
            case 12:
              $ctx.returnValue = null;
              $ctx.state = -2;
              break;
            case 10:
              log.debug('\n\n:: docker-remote - getParent ::');
              log.debug('image  ID: ' + imageId);
              log.debug('parent ID:   ' + imageInspect.Parent);
              $ctx.state = 17;
              break;
            case 17:
              $ctx.returnValue = ({
                image: currentImage,
                imageInspect: imageInspect
              });
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__1, this);
    }).bind(this))();
  },
  anscestors: function(firstImageId) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__1() {
      var currentImageId,
          anscestors,
          imageResult,
          imageInspectors;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              currentImageId = firstImageId;
              anscestors = [];
              $ctx.state = 16;
              break;
            case 16:
              $ctx.state = (currentImageId) ? 1 : 12;
              break;
            case 1:
              $ctx.state = 2;
              return this.getParent(currentImageId);
            case 2:
              imageResult = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = (imageResult === null) ? 7 : 6;
              break;
            case 7:
              log.debug('\n\n:: docker-remote - anscestors ::');
              log.debug('image not found: ' + currentImageId);
              $ctx.state = 8;
              break;
            case 8:
              $ctx.returnValue = null;
              $ctx.state = -2;
              break;
            case 6:
              anscestors.push(imageResult);
              currentImageId = imageResult.imageInspect.Parent;
              $ctx.state = 16;
              break;
            case 12:
              log.debug('\n\n:: docker-remote - anscestors ::');
              imageInspectors = _.pluck(anscestors, 'imageInspect');
              log.debug(_.pluck(imageInspectors, 'Id'));
              $ctx.state = 18;
              break;
            case 18:
              $ctx.returnValue = anscestors;
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__1, this);
    }).bind(this))();
  },
  loadImage: function(outputPath, imageId) {
    return new Q.Promise(function(resolve, reject) {
      try {
        var outputLoadPath = path.join(outputPath, imageId + '.tar');
        var handler = function(err) {
          if (err) {
            return reject(err);
          }
          log.debug('\n\n:: docker-remote - loadImage ::');
          log.debug(outputLoadPath);
          return resolve(outputLoadPath);
        };
        this.docker.loadImage(outputLoadPath, handler);
      } catch (err) {
        reject(err);
      }
    }.bind(this));
  },
  setImageTag: function(namespace, repository, imageId, tagName) {
    return Q.async($traceurRuntime.initGeneratorFunction(function $__1() {
      var image,
          imageInspectResult;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = 2;
              return this.docker.getImage(imageId);
            case 2:
              image = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = 6;
              return this.inspectImage(image);
            case 6:
              imageInspectResult = $ctx.sent;
              $ctx.state = 8;
              break;
            case 8:
              $ctx.state = (imageInspectResult === null) ? 11 : 10;
              break;
            case 11:
              log.debug('\n\n:: docker-remote - setImageTag ::');
              log.debug('no image found with ' + imageId);
              $ctx.state = 12;
              break;
            case 12:
              $ctx.returnValue = null;
              $ctx.state = -2;
              break;
            case 10:
              image.tag({
                repo: namespace + '/' + repository,
                tag: tagName,
                force: true
              }, function(err, data) {
                if (err) {
                  throw err;
                }
                return data;
              });
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, $__1, this);
    }).bind(this))();
  }
}, {});
module.exports = {
  __esModule: true,
  get default() {
    return DockerRemote;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvY2tlci1yZW1vdGUvaW5kZXguanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvOSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xMCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci84IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzciLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci82IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzQiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci81IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzE1IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzE2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsQUFBSSxFQUFBLENBQUEsTUFBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsV0FBVSxDQUFDLENBQUM7QUFDakMsQUFBSSxFQUFBLENBQUEsRUFBQyxFQUFRLENBQUEsT0FBTSxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7QUFDMUIsQUFBSSxFQUFBLENBQUEsQ0FBQSxFQUFTLENBQUEsT0FBTSxBQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7QUFDekIsQUFBSSxFQUFBLENBQUEsR0FBRSxFQUFPLENBQUEsT0FBTSxBQUFDLENBQUMsbUJBQWtCLENBQUMsQ0FBQztBQUN6QyxBQUFJLEVBQUEsQ0FBQSxJQUFHLEVBQU0sQ0FBQSxPQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUM1QixBQUFJLEVBQUEsQ0FBQSxDQUFBLEVBQVMsQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQ0w5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c291cmNlc0NvbnRlbnQiOlsidmFyIERvY2tlciA9IHJlcXVpcmUoJ2RvY2tlcm9kZScpO1xudmFyIGZzICAgICA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgUSAgICAgID0gcmVxdWlyZSgncScpO1xudmFyIGxvZyAgICA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbG9nZ2VyJyk7XG52YXIgcGF0aCAgID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIF8gICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5jbGFzcyBEb2NrZXJSZW1vdGUge1xuXG4gIGNvbnN0cnVjdG9yKGRvY2tlcm9kZV9vcHRpb25zKSB7XG4gICAgaWYgKGRvY2tlcm9kZV9vcHRpb25zICYmIGRvY2tlcm9kZV9vcHRpb25zLmRvY2tlcm9kZV9tb2RlbSkge1xuICAgICAgdGhpcy5kb2NrZXIgPSBuZXcgRG9ja2VyKCk7XG4gICAgICB0aGlzLmRvY2tlci5tb2RlbSA9IGRvY2tlcm9kZV9vcHRpb25zLmRvY2tlcm9kZV9tb2RlbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNvY2tldCA9IHByb2Nlc3MuZW52LkRPQ0tFUl9TT0NLRVQgfHxcbiAgICAgICAgICAgICAgICAgIChkb2NrZXJvZGVfb3B0aW9ucyAmJiBkb2NrZXJvZGVfb3B0aW9ucy5zb2NrZXRfZG9ja2Vyb2RlKSB8fFxuICAgICAgICAgICAgICAgICAgICcvdmFyL3J1bi9kb2NrZXIuc29jayc7XG5cbiAgICAgIHZhciBzdGF0cyAgPSBmcy5zdGF0U3luYyhzb2NrZXQpO1xuICAgICAgaWYgKCFzdGF0cy5pc1NvY2tldCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFyZSB5b3Ugc3VyZSB0aGUgZG9ja2VyIGlzIHJ1bm5pbmc/XCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5kb2NrZXIgPSBuZXcgRG9ja2VyKHsgc29ja2V0UGF0aDogc29ja2V0IH0pO1xuICAgIH1cbiAgfVxuXG4gIGxpc3RBY3RpdmVDb250YWluZXJzKCkge1xuICAgIHJldHVybiBuZXcgUS5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyeSB7XG5cbiAgICAgICAgdGhpcy5kb2NrZXIubGlzdENvbnRhaW5lcnMoe2FsbDogZmFsc2V9LCBmdW5jdGlvbihlcnIsIGNvbnRhaW5lcnMpIHtcbiAgICAgICAgICBsb2cuZGVidWcoJ1xcblxcbjo6IGRvY2tlci1yZW1vdGUgLSBsaXN0QWN0aXZlQ29udGFpbmVycyA6OicpO1xuICAgICAgICAgIGxvZy5kZWJ1Zyhjb250YWluZXJzKTtcbiAgICAgICAgICByZXNvbHZlKGNvbnRhaW5lcnMpO1xuICAgICAgICB9KTtcblxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy5lcnJvcihlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG5cbiAgbGlzdEFsbENvbnRhaW5lcnMoKSB7XG4gICAgcmV0dXJuIG5ldyBRLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJ5IHtcblxuICAgICAgICB0aGlzLmRvY2tlci5saXN0Q29udGFpbmVycyh7YWxsOiB0cnVlfSwgZnVuY3Rpb24oZXJyLCBjb250YWluZXJzKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKCdcXG5cXG46OiBkb2NrZXItcmVtb3RlIC0gbGlzdEFsbENvbnRhaW5lcnMgOjonKTtcbiAgICAgICAgICBsb2cuZGVidWcoY29udGFpbmVycyk7XG4gICAgICAgICAgcmVzb2x2ZShjb250YWluZXJzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGxpc3RJbWFnZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBRLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJ5IHtcblxuICAgICAgICB0aGlzLmRvY2tlci5saXN0SW1hZ2VzKGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICAgIGxvZy5kZWJ1ZygnXFxuXFxuOjogZG9ja2VyLXJlbW90ZSAtIGxpc3RJbWFnZXMgOjonKTtcbiAgICAgICAgICBsb2cuZGVidWcoZGF0YSk7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGdldEltYWdlKGltYWdlSWQpIHtcbiAgICByZXR1cm4gbmV3IFEuUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0cnkge1xuXG4gICAgICAgIHZhciBpbWFnZSA9IHRoaXMuZG9ja2VyLmdldEltYWdlKGltYWdlSWQpO1xuICAgICAgICBsb2cuZGVidWcoJ1xcblxcbjo6IGRvY2tlci1yZW1vdGUgLSBpbWFnZSA6OicpO1xuICAgICAgICBsb2cuZGVidWcoaW1hZ2UpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShpbWFnZSk7XG5cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGluc3BlY3RJbWFnZShpbWFnZSkge1xuICAgIHJldHVybiBuZXcgUS5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyeSB7XG5cbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgaWYgKGVyci5zdGF0dXNDb2RlID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUobnVsbCk7IC8vIGRvZXMgbm90IGV4aXN0LCBpcyBudWxsIHRoZW1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxvZy5kZWJ1ZygnXFxuXFxuOjogZG9ja2VyLXJlbW90ZSAtIGltYWdlIGluc3BlY3QgOjonKTtcbiAgICAgICAgICBsb2cuZGVidWcoZGF0YSk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaW1hZ2UuaW5zcGVjdChoYW5kbGVyKTtcblxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG4gIH1cblxuICByZW1vdmVJbWFnZShpbWFnZUlkKSB7XG4gICAgcmV0dXJuIFEuYXN5bmMoZnVuY3Rpb24qICgpIHtcblxuICAgICAgdmFyIGltYWdlID0geWllbGQgdGhpcy5nZXRJbWFnZShpbWFnZUlkKTtcblxuICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cblxuICAgICAgICBsb2cuZGVidWcoJ1xcblxcbjo6IGRvY2tlci1yZW1vdGUgLSByZW1vdmVJbWFnZSA6OicpO1xuICAgICAgICBsb2cuZGVidWcoZGF0YSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfTtcblxuICAgICAgaW1hZ2UucmVtb3ZlKGhhbmRsZXIpO1xuXG4gICAgfS5iaW5kKHRoaXMpKSgpO1xuICB9XG5cbiAgc2VhcmNoSW1hZ2VzKGltYWdlTmFtZSkge1xuICAgIHJldHVybiBuZXcgUS5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyeSB7XG5cbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxvZy5kZWJ1ZygnXFxuXFxuOjogZG9ja2VyLXJlbW90ZSAtIHNlYXJjaEltYWdlcyA6OicpO1xuICAgICAgICAgIGxvZy5kZWJ1ZyhkYXRhKTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmRvY2tlci5zZWFyY2hJbWFnZXMoeyB0ZXJtOiBpbWFnZU5hbWUgfSwgaGFuZGxlcik7XG5cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG5cbiAgc2VhcmNoSW1hZ2VzQnlUYWcodGFnTmFtZSkge1xuICAgIHJldHVybiBRLmFzeW5jKGZ1bmN0aW9uKiAoKSB7XG4gICAgICAvLyBnZXQgYWxsIGltYWdlc1xuICAgICAgdmFyIGFsbEltYWdlcyA9IHlpZWxkIHRoaXMubGlzdEltYWdlcygpO1xuXG4gICAgICAvLyBzZWFyY2ggdGFnXG4gICAgICB2YXIgaW1hZ2VzRm91bmQgPSBfLmZpbHRlcihhbGxJbWFnZXMsIGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgICAgIGlmIChfLmNvbnRhaW5zKGltYWdlLlJlcG9UYWdzLCB0YWdOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBpbWFnZTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG5cbiAgICAgIGxvZy5kZWJ1ZygnXFxuXFxuOjogZG9ja2VyLXJlbW90ZSAtIHNlYXJjaEltYWdlc0J5VGFnIDo6Jyk7XG4gICAgICBsb2cuZGVidWcoaW1hZ2VzRm91bmQpO1xuICAgICAgcmV0dXJuIGltYWdlc0ZvdW5kO1xuICAgIH0uYmluZCh0aGlzKSkoKTtcbiAgfVxuXG4gIGdldFBhcmVudChpbWFnZUlkKSB7XG4gICAgcmV0dXJuIFEuYXN5bmMoZnVuY3Rpb24qICgpIHtcbiAgICAgIHZhciBjdXJyZW50SW1hZ2UgPSB5aWVsZCB0aGlzLmdldEltYWdlKGltYWdlSWQpO1xuICAgICAgdmFyIGltYWdlSW5zcGVjdCA9IHlpZWxkIHRoaXMuaW5zcGVjdEltYWdlKGN1cnJlbnRJbWFnZSk7XG5cbiAgICAgIGlmIChpbWFnZUluc3BlY3QgPT09IG51bGwpIHtcbiAgICAgICAgbG9nLmRlYnVnKCdcXG5cXG46OiBkb2NrZXItcmVtb3RlIC0gZ2V0UGFyZW50IDo6Jyk7XG4gICAgICAgIGxvZy5kZWJ1ZygnaW1hZ2Ugbm90IGZvdW5kOiAnICsgaW1hZ2VJZCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBsb2cuZGVidWcoJ1xcblxcbjo6IGRvY2tlci1yZW1vdGUgLSBnZXRQYXJlbnQgOjonKTtcbiAgICAgIGxvZy5kZWJ1ZygnaW1hZ2UgIElEOiAnICsgaW1hZ2VJZCk7XG4gICAgICBsb2cuZGVidWcoJ3BhcmVudCBJRDogICAnICsgaW1hZ2VJbnNwZWN0LlBhcmVudCk7XG4gICAgICByZXR1cm4gKHtcbiAgICAgICAgaW1hZ2UgICAgICAgIDogY3VycmVudEltYWdlLFxuICAgICAgICBpbWFnZUluc3BlY3QgOiBpbWFnZUluc3BlY3RcbiAgICAgIH0pO1xuICAgIH0uYmluZCh0aGlzKSkoKTtcbiAgfVxuXG4gIGFuc2Nlc3RvcnMoZmlyc3RJbWFnZUlkKSB7XG4gICAgcmV0dXJuIFEuYXN5bmMoZnVuY3Rpb24qICgpIHtcbiAgICAgIHZhciBjdXJyZW50SW1hZ2VJZCA9IGZpcnN0SW1hZ2VJZDtcbiAgICAgIHZhciBhbnNjZXN0b3JzID0gW107XG5cbiAgICAgIHdoaWxlIChjdXJyZW50SW1hZ2VJZCkge1xuICAgICAgICB2YXIgaW1hZ2VSZXN1bHQgPSB5aWVsZCB0aGlzLmdldFBhcmVudChjdXJyZW50SW1hZ2VJZCk7XG5cbiAgICAgICAgaWYgKGltYWdlUmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKCdcXG5cXG46OiBkb2NrZXItcmVtb3RlIC0gYW5zY2VzdG9ycyA6OicpO1xuICAgICAgICAgIGxvZy5kZWJ1ZygnaW1hZ2Ugbm90IGZvdW5kOiAnICsgY3VycmVudEltYWdlSWQpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgYW5zY2VzdG9ycy5wdXNoKGltYWdlUmVzdWx0KTtcbiAgICAgICAgY3VycmVudEltYWdlSWQgPSBpbWFnZVJlc3VsdC5pbWFnZUluc3BlY3QuUGFyZW50O1xuICAgICAgfVxuXG4gICAgICBsb2cuZGVidWcoJ1xcblxcbjo6IGRvY2tlci1yZW1vdGUgLSBhbnNjZXN0b3JzIDo6Jyk7XG4gICAgICB2YXIgaW1hZ2VJbnNwZWN0b3JzID0gXy5wbHVjayhhbnNjZXN0b3JzLCAnaW1hZ2VJbnNwZWN0Jyk7XG4gICAgICBsb2cuZGVidWcoXy5wbHVjayhpbWFnZUluc3BlY3RvcnMsICdJZCcpKTtcbiAgICAgIHJldHVybiBhbnNjZXN0b3JzO1xuICAgIH0uYmluZCh0aGlzKSkoKTtcbiAgfVxuXG4gIGxvYWRJbWFnZShvdXRwdXRQYXRoLCBpbWFnZUlkKSB7XG4gICAgcmV0dXJuIG5ldyBRLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJ5IHtcblxuICAgICAgICB2YXIgb3V0cHV0TG9hZFBhdGggPSBwYXRoLmpvaW4ob3V0cHV0UGF0aCwgaW1hZ2VJZCArICcudGFyJyk7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGVyci8qLCBkYXRhKi8pIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbG9nLmRlYnVnKCdcXG5cXG46OiBkb2NrZXItcmVtb3RlIC0gbG9hZEltYWdlIDo6Jyk7XG4gICAgICAgICAgbG9nLmRlYnVnKG91dHB1dExvYWRQYXRoKTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShvdXRwdXRMb2FkUGF0aCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5kb2NrZXIubG9hZEltYWdlKG91dHB1dExvYWRQYXRoLCBoYW5kbGVyKTtcblxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG4gIH1cblxuICBzZXRJbWFnZVRhZyhuYW1lc3BhY2UsIHJlcG9zaXRvcnksIGltYWdlSWQsIHRhZ05hbWUpIHtcbiAgICByZXR1cm4gUS5hc3luYyhmdW5jdGlvbiogKCkge1xuICAgICAgdmFyIGltYWdlID0geWllbGQgdGhpcy5kb2NrZXIuZ2V0SW1hZ2UoaW1hZ2VJZCk7XG5cbiAgICAgIC8vIGNoZWNrIGlmIHRoZSBpbWFnZSBleGlzdHNcbiAgICAgIHZhciBpbWFnZUluc3BlY3RSZXN1bHQgPSB5aWVsZCB0aGlzLmluc3BlY3RJbWFnZShpbWFnZSk7XG4gICAgICBpZiAoaW1hZ2VJbnNwZWN0UmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnXFxuXFxuOjogZG9ja2VyLXJlbW90ZSAtIHNldEltYWdlVGFnIDo6Jyk7XG4gICAgICAgIGxvZy5kZWJ1Zygnbm8gaW1hZ2UgZm91bmQgd2l0aCAnICsgaW1hZ2VJZCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyB0YWcgbG9jYWwgaW1hZ2VcbiAgICAgIGltYWdlLnRhZyh7XG4gICAgICAgIHJlcG8gOiBuYW1lc3BhY2UgKyAnLycgKyByZXBvc2l0b3J5LFxuICAgICAgICB0YWcgIDogdGFnTmFtZSxcbiAgICAgICAgZm9yY2U6IHRydWVcbiAgICAgIH0sIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSk7XG4gICAgfS5iaW5kKHRoaXMpKSgpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGdldCBkZWZhdWx0KCkgeyByZXR1cm4gRG9ja2VyUmVtb3RlOyB9XG59O1xuIiwidmFyICRfX3BsYWNlaG9sZGVyX18wID0gJF9fcGxhY2Vob2xkZXJfXzEiLCIoJHRyYWNldXJSdW50aW1lLmNyZWF0ZUNsYXNzKSgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yKSIsIiR0cmFjZXVyUnVudGltZS5pbml0R2VuZXJhdG9yRnVuY3Rpb24oJF9fcGxhY2Vob2xkZXJfXzApIiwicmV0dXJuICRfX3BsYWNlaG9sZGVyX18wKFxuICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMSxcbiAgICAgICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzIsIHRoaXMpOyIsIiR0cmFjZXVyUnVudGltZS5jcmVhdGVHZW5lcmF0b3JJbnN0YW5jZSIsImZ1bmN0aW9uKCRjdHgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSAkX19wbGFjZWhvbGRlcl9fMFxuICAgIH0iLCJyZXR1cm4gJF9fcGxhY2Vob2xkZXJfXzAiLCIkY3R4LnNlbnQiLCJyZXR1cm4gJGN0eC5lbmQoKSIsIiRjdHgucmV0dXJuVmFsdWUgPSAkX19wbGFjZWhvbGRlcl9fMCIsIiRjdHguc3RhdGUgPSAoJF9fcGxhY2Vob2xkZXJfXzApID8gJF9fcGxhY2Vob2xkZXJfXzEgOiAkX19wbGFjZWhvbGRlcl9fMjtcbiAgICAgICAgYnJlYWsiXX0=