"use strict";
var request = require('requestretry');
var DOCKER_HUB_URL = 'https://index.docker.io';
var Q = require('q');
var request = require('requestretry');
var log = require('../helpers/logger');
var _ = require('lodash');
var DockerHub = function DockerHub(request_options) {
  this.__request_options = request_options || {};
};
($traceurRuntime.createClass)(DockerHub, {
  get request_options() {
    return this.__request_options;
  },
  set request_options(value) {
    this.__request_options = value;
  },
  auth: function(namespace, user, password) {
    return new Q.Promise(function(resolve, reject) {
      var url = DOCKER_HUB_URL + '/v1/repositories/' + namespace + '/auth';
      request.get(url).auth(user, password, false, function(error, response) {
        if (!error && response.statusCode == 200) {
          log.debug('\n\n:: docker-hub - auth ::');
          log.debug(response.headers);
          resolve(response.headers['set-cookie']);
        } else {
          reject(error);
        }
      });
    });
  },
  images: function(namespace, repository) {
    var request_options_local = this.__request_options;
    return new Q.Promise(function(resolve, reject) {
      var options = _.assign({
        url: DOCKER_HUB_URL + '/v1/repositories/' + namespace + '/' + repository + '/images',
        headers: {'X-Docker-Token': 'true'}
      }, request_options_local);
      function callback(error, response) {
        if (!error && response.statusCode == 200) {
          log.debug('\n\n:: docker-hub - images ::');
          var result = {
            namespace: namespace,
            repository: repository,
            endpoint: response.headers['x-docker-endpoints'],
            token: response.headers['x-docker-token']
          };
          log.debug(result);
          resolve(result);
        } else {
          reject(error);
        }
      }
      request(options, callback);
    });
  },
  search: function(query) {
    var request_options_local = this.__request_options;
    return new Q.Promise(function(resolve, reject) {
      var options = _.assign({
        url: DOCKER_HUB_URL + '/v1/search',
        qs: {q: query}
      }, request_options_local);
      function callback(error, response, body) {
        if (!error && response.statusCode == 200) {
          var result = JSON.parse(body);
          log.debug('\n\n:: docker-hub - search ::');
          log.debug(result);
          resolve(result);
        } else {
          reject(error);
        }
      }
      request(options, callback);
    });
  }
}, {});
module.exports = {
  __esModule: true,
  get default() {
    return DockerHub;
  }
};

//# sourceMappingURL=data:application/json;base64,