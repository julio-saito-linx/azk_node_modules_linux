'use strict';

var _bind = Function.prototype.bind;

var _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var path = require('path');
var printf = require('printf');
var chalk = require('chalk');

function load(folder, locale) {
  // jshint ignore:line
  var file = path.join(folder, locale);
  return require(file);
}

var I18n = (function () {
  function I18n(opts) {
    var _this = this;

    _classCallCheck(this, I18n);

    if (typeof opts.dict == 'object') {
      this.dict = opts.dict;
    } else if (opts.locale) {
      this.dict = load(opts.path, opts.locale);
    }

    // Cache gets
    this.cache = {};

    // Alias to translate
    this.t = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _this.translate.apply(_this, args);
    };
  }

  _createClass(I18n, [{
    key: '_find',
    value: function _find(keys) {
      var buffer = this.dict || {};

      for (var i = 0; i < keys.length; i++) {
        buffer = buffer[keys[i]];
        if (!buffer) {
          break;
        }
      }

      return buffer;
    }
  }, {
    key: 'translate',
    value: function translate(key) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var result = this.cache[key];

      if (typeof result === 'undefined') {
        this.cache[key] = result = this._resolveKey(key);
      }

      if (result.value) {
        try {
          switch (typeof result.value) {
            case 'string':
              return printf.apply(undefined, [result.value].concat(args));
            case 'object':
              return result.value;
            default:
              return key;
          }
        } catch (err) {
          var match,
              label = chalk.red('Translate error');
          match = err.toString().match(/Error: missing key (.*)/);
          if (match) {
            return label + (': \'' + key + '\', missing: ' + match[1]);
          }

          match = err.toString().match(/Error: format requires a mapping/);
          if (match) {
            return label + (': \'' + key + '\', missing a mappping');
          }

          throw err;
        }
      } else {
        return result.key;
      }
    }
  }, {
    key: '_resolveKey',
    value: function _resolveKey(key) {
      var keys = typeof key == 'string' ? key.split('.') : key;
      var value = this._find(keys);

      // Search again, now ancestors is *
      if (!value) {
        var again_keys = new (_bind.apply(Array, [null].concat(_toConsumableArray(keys))))();
        again_keys[again_keys.length - 2] = '*';
        value = this._find(again_keys);
      }

      // Key to show in a error
      key = chalk.yellow(typeof key == 'string' ? key : key.join('.'));

      return { key: key, value: value };
    }
  }]);

  return I18n;
})();

// Support es6 and es5
I18n.I18n = I18n;
I18n['default'] = I18n;
I18n.__esModule = true;
module.exports = I18n;
//# sourceMappingURL=data:application/json;base64,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QUN2QixNQUFNLENBQUMsT0FBTyxHQUFJLElBQUksQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBwYXRoICAgPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgcHJpbnRmID0gcmVxdWlyZSgncHJpbnRmJyk7XG52YXIgY2hhbGsgID0gcmVxdWlyZSgnY2hhbGsnKTtcblxuZnVuY3Rpb24gbG9hZChmb2xkZXIsIGxvY2FsZSkgeyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgdmFyIGZpbGUgPSBwYXRoLmpvaW4oZm9sZGVyLCBsb2NhbGUpO1xuICByZXR1cm4gcmVxdWlyZShmaWxlKTtcbn1cblxuY2xhc3MgSTE4biB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBpZiAodHlwZW9mKG9wdHMuZGljdCkgPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhpcy5kaWN0ID0gb3B0cy5kaWN0O1xuICAgIH0gZWxzZSBpZiAob3B0cy5sb2NhbGUpIHtcbiAgICAgIHRoaXMuZGljdCA9IGxvYWQob3B0cy5wYXRoLCBvcHRzLmxvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gQ2FjaGUgZ2V0c1xuICAgIHRoaXMuY2FjaGUgPSB7fTtcblxuICAgIC8vIEFsaWFzIHRvIHRyYW5zbGF0ZVxuICAgIHRoaXMudCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUoLi4uYXJncyk7XG4gICAgfTtcbiAgfVxuXG4gIF9maW5kKGtleXMpIHtcbiAgICB2YXIgYnVmZmVyID0gdGhpcy5kaWN0IHx8IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBidWZmZXIgPSBidWZmZXJba2V5c1tpXV07XG4gICAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgdHJhbnNsYXRlKGtleSwgLi4uYXJncykge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLmNhY2hlW2tleV07XG5cbiAgICBpZiAodHlwZW9mKHJlc3VsdCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmNhY2hlW2tleV0gPSByZXN1bHQgPSB0aGlzLl9yZXNvbHZlS2V5KGtleSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC52YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3dpdGNoICh0eXBlb2YocmVzdWx0LnZhbHVlKSkge1xuICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBwcmludGYocmVzdWx0LnZhbHVlLCAuLi5hcmdzKTtcbiAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdmFyIG1hdGNoLCBsYWJlbCA9IGNoYWxrLnJlZChcIlRyYW5zbGF0ZSBlcnJvclwiKTtcbiAgICAgICAgbWF0Y2ggPSBlcnIudG9TdHJpbmcoKS5tYXRjaCgvRXJyb3I6IG1pc3Npbmcga2V5ICguKikvKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgcmV0dXJuIGxhYmVsICsgYDogJyR7a2V5fScsIG1pc3Npbmc6ICR7bWF0Y2hbMV19YDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdGNoID0gZXJyLnRvU3RyaW5nKCkubWF0Y2goL0Vycm9yOiBmb3JtYXQgcmVxdWlyZXMgYSBtYXBwaW5nLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHJldHVybiBsYWJlbCArIGA6ICcke2tleX0nLCBtaXNzaW5nIGEgbWFwcHBpbmdgO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0LmtleTtcbiAgICB9XG4gIH1cblxuICBfcmVzb2x2ZUtleShrZXkpIHtcbiAgICB2YXIga2V5cyAgID0gKHR5cGVvZihrZXkpID09IFwic3RyaW5nXCIpID8ga2V5LnNwbGl0KCcuJykgOiBrZXk7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5fZmluZChrZXlzKTtcblxuICAgIC8vIFNlYXJjaCBhZ2Fpbiwgbm93IGFuY2VzdG9ycyBpcyAqXG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgdmFyIGFnYWluX2tleXMgPSBuZXcgQXJyYXkoLi4ua2V5cyk7XG4gICAgICBhZ2Fpbl9rZXlzW2FnYWluX2tleXMubGVuZ3RoIC0gMl0gPSAnKic7XG4gICAgICB2YWx1ZSA9IHRoaXMuX2ZpbmQoYWdhaW5fa2V5cyk7XG4gICAgfVxuXG4gICAgLy8gS2V5IHRvIHNob3cgaW4gYSBlcnJvclxuICAgIGtleSA9IGNoYWxrLnllbGxvdyh0eXBlb2Yoa2V5KSA9PSBcInN0cmluZ1wiID8ga2V5IDoga2V5LmpvaW4oXCIuXCIpKTtcblxuICAgIHJldHVybiB7IGtleSwgdmFsdWUgfTtcbiAgfVxufVxuXG4vLyBTdXBwb3J0IGVzNiBhbmQgZXM1XG5JMThuLkkxOG4gICAgICAgPSBJMThuO1xuSTE4bi5kZWZhdWx0ICAgID0gSTE4bjtcbkkxOG4uX19lc01vZHVsZSA9IHRydWU7XG5tb2R1bGUuZXhwb3J0cyAgPSBJMThuO1xuIl0sInNvdXJjZVJvb3QiOiIvaTE4bi1jbGk6MC4wLjIvc3JjIn0=