// Generated by CoffeeScript 1.6.3
(function() {
  var command, parse,
    __slice = [].slice;

  parse = require('./parse');

  command = require('./command');

  /*
  	* List running vms.
  	*
  	* @param {function(?err, result)} callback
  */


  exports.list = function(callback) {
    return command.exec('list', 'runningvms', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot list running vms"));
      }
      if (callback) {
        return callback(null, parse.namepair_list(output));
      }
    });
  };

  /*
  	* Starts vm.
  	*
  	* @param {string} vm
  	* @param {function(?err, ?headless, callback)}
  */


  exports.start = function(vm, callback) {
    return command.exec('startvm', vm, '--type', 'headless', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot start " + vm));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Stops vm.
  	*
  	* @param {string} vm
  	* @param {function(?err)}
  */


  exports.stop = function(vm, callback) {
    return command.exec('controlvm', vm, 'poweroff', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot stop " + vm));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Pauses vm.
  	*
  	* @param {string} vm
  	* @param {function(?err)}
  */


  exports.pause = function(vm, callback) {
    return command.exec('controlvm', vm, 'pause', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot pause " + vm));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Resumes vm.
  	*
  	* @param {string} vm
  	* @param {function(?err)}
  */


  exports.resume = function(vm, callback) {
    return command.exec('controlvm', vm, 'resume', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot resume " + vm));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Save vm.
  	*
  	* @param {string} vm
  	* @param {function(?err)}
  */


  exports.save = function(vm, callback) {
    return command.exec('controlvm', vm, 'savestate', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot save " + vm));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Executes command on vm.
  	*
  	* @param {string} vm
  	* @param {string} user
  	* @param {string} pass
  	* @param {string} path
  	* @param {array<string>} args
  	* @param {function(?err, output)}
  */


  exports.exec = function() {
    var args, callback, must, pass, path, user, vm, _i;
    vm = arguments[0], user = arguments[1], pass = arguments[2], path = arguments[3], args = 6 <= arguments.length ? __slice.call(arguments, 4, _i = arguments.length - 1) : (_i = 4, []), callback = arguments[_i++];
    must = [];
    must.push('--username') && must.push(user);
    must.push('--password') && must.push(pass);
    must.push('--wait-exit');
    must.push('--wait-stdout');
    must.push('--wait-stderr');
    return command.exec.apply(command, ['guestcontrol', vm, 'execute'].concat(__slice.call(must), [path], ['--'], __slice.call(args), [function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot exec " + path + " " + (args.join(' ')) + " on " + vm));
      }
      if (callback) {
        return callback(null, output);
      }
    }]));
  };

  /*
  	* Copies from guest to host.
  	*
  	* @param {string} vm
  	* @param {string} user
  	* @param {string} pass
  	* @param {string} from_guest
  	* @param {string} to_host
  */


  exports.copy_from = function(vm, user, pass, from_guest, to_host) {
    var must;
    must = [];
    must.push('--username') && must.push(user);
    must.push('--password') && must.push(pass);
    must.push('--verbose');
    must.push('--follow');
    must.push('--recursive');
    return command.exec.apply(command, ['guestcontrol', vm, 'copyfrom', from_guest, to_host].concat(__slice.call(must), [function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot copy from guest " + from_guest + " to host " + to_host + " on " + vm));
      }
      if (callback) {
        return callback();
      }
    }]));
  };

  /*
  	* Copies from host to guest.
  	*
  	* @param {string} vm
  	* @param {string} user
  	* @param {string} pass
  	* @param {string} from_host
  	* @param {string} to_guest
  */


  exports.copy_to = function(vm, user, pass, from_host, to_guest) {
    var must;
    must = [];
    must.push('--username') && must.push(user);
    must.push('--password') && must.push(pass);
    must.push('--verbose');
    must.push('--follow');
    must.push('--recursive');
    return command.exec.apply(command, ['guestcontrol', vm, 'copyto', from_host, to_guest].concat(__slice.call(must), [function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot copy from host " + from_host + " to guest " + to_guest + " on " + vm));
      }
      if (callback) {
        return callback();
      }
    }]));
  };

}).call(this);
