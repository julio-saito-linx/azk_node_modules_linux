// Generated by CoffeeScript 1.6.3
(function() {
  var command, parse;

  parse = require('./parse');

  command = require('./command');

  /*
  	* List vms.
  	*
  	* @param {function(?err, result)} callback
  */


  exports.list = function(callback) {
    return command.exec('list', 'vms', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot list vms"));
      }
      if (callback) {
        return callback(null, parse.namepair_list(output));
      }
    });
  };

  /*
  	* Show vm info.
  	*
  	* @param {string} vm
  	* @param {function(?err, info)} callback
  */


  exports.info = function(vm, callback) {
    return command.exec('showvminfo', vm, '--machinereadable', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot show vm info for " + vm));
      }
      if (callback) {
        return callback(null, parse.machinereadable_list(output));
      }
    });
  };

  /*
  	* Enumerate guest properties
  	*
  	* @param {string} vm
  	* @param {function(?err, result)} callback
  */


  exports.properties = function(vm, callback) {
    return command.exec('guestproperty', 'enumerate', vm, function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot enumerate properties for " + vm));
      }
      if (callback) {
        return callback(null, parse.property_list(output));
      }
    });
  };

  /*
  	* Removes vm. The vm files are automatically deleted.
  	*
  	* @param {string} vm
  	* @param {function(?err)} callback
  */


  exports.remove = function(vm, callback) {
    return command.exec('unregistervm', vm, '--delete', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot remove " + vm));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Imports vm.
  	*
  	* @param {string} path
  	* @param {string} vm
  	* @param {function(?err)} callback
  */


  exports["import"] = function(path, vm, callback) {
    return command.exec('import', path, '--vsys', '0', '--vmname', vm, function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot import " + path + " into " + vm));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Exports vm.
  	*
  	* @param {string} vm
  	* @param {string} path
  	* @param {function(?err)} callback
  */


  exports["export"] = function(vm, path, callback) {
    return command.exec('export', vm, '--output', path, function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot export " + vm + " into " + path));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Clones vm. The vm is automatically registered.
  	*
  	* @param {string} src_vm
  	* @param {string} to_vm
  	* @param {function(?err)} callback
  */


  exports.clone = function(src_vm, to_vm, callback) {
    return command.exec('clonevm', src_vm, '--name', to_vm, '--register', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot clone " + src_vm + " into " + to_vm));
      }
      if (callback) {
        return callback();
      }
    });
  };

}).call(this);
