// Generated by CoffeeScript 1.6.3
(function() {
  var command, parse, proto,
    __slice = [].slice;

  parse = require('./parse');

  proto = require('./proto');

  command = require('./command');

  /*
  	* Lists available dhcp servers.
  	*
  	* @param {function(?err, result)} callback
  */


  exports.list_servers = function(callback) {
    return command.exec('list', 'dhcpservers', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot list dhcp servers"));
      }
      if (callback) {
        return callback(null, parse.linebreak_list(output));
      }
    });
  };

  /*
  	* Adds hostonly dhcp server. The server is not enabled by default.
  	*
  	* @param {string} netname
  	* @param {string} ip
  	* @param {string} netmask
  	* @param {string} lower_ip
  	* @param {string} upper_ip
  	* @param {function(?err)} callback
  */


  exports.add_hostonly_server = function(netname, ip, netmask, lower_ip, upper_ip, callback) {
    var opts;
    opts = [];
    opts.push('--ip') && opts.push(ip);
    opts.push('--netmask') && opts.push(netmask);
    opts.push('--lowerip') && opts.push(lower_ip);
    opts.push('--upperip') && opts.push(upper_ip);
    return command.exec.apply(command, ['dhcpserver', 'add', '--ifname', netname].concat(__slice.call(opts), [function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot add hostonly dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    }]));
  };

  /*
  	* Removes hostonly dhcp server.
  	*
  	* @param {string} netname
  	* @param {function(?err)} callback
  */


  exports.remove_hostonly_server = function(netname, callback) {
    return command.exec('dhcpserver', 'remove', '--ifname', netname, function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot remove hostonly dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Modifies hostonly dhcp server
  	*
  	* @param {string} netname
  	* @param {string} ip
  	* @param {string} netmask
  	* @param {string} lower_ip
  	* @param {string} upper_ip
  	* @param {function(?err)} callback
  */


  exports.modify_hostonly_server = function(netname, ip, netmask, lower_ip, upper_ip, callback) {
    var opts;
    opts = [];
    opts.push('--ip') && opts.push(ip);
    opts.push('--netmask') && opts.push(netmask);
    opts.push('--lowerip') && opts.push(lower_ip);
    opts.push('--upperip') && opts.push(upper_ip);
    return command.exec.apply(command, ['dhcpserver', 'modify', '--ifname', netname].concat(__slice.call(opts), [function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot modify hostonly dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    }]));
  };

  /*
  	* Enables hostonly dhcp server.
  	*
  	* @param {string} netname
  	* @param {function(?err)} callback
  */


  exports.enable_hostonly_server = function(netname, callback) {
    return command.exec('dhcpserver', 'modify', '--ifname', netname, '--enable', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot enable hostonly dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Disables hostonly dhcp server.
  	*
  	* @param {string} netname
  	* @param {function(?err)} callback
  */


  exports.disable_hostonly_server = function(netname, callback) {
    return command.exec('dhcpserver', 'modify', '--ifname', netname, '--disable', function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot disable hostonly dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Ensures that a hostonly dhcp server is available and configured.
  	*
  	* @param {string} netname
  	* @param {string} ip
  	* @param {string} netmask
  	* @param {string} lower_ip
  	* @param {string} upper_ip
  	* @param {function(?err)} callback
  */


  exports.ensure_hostonly_server = function(netname, ip, netmask, lower_ip, upper_ip, callback) {
    return exports.list_servers(function(err, servers) {
      var server;
      if (err) {
        return callback(err);
      }
      server = servers.narrow(function(previous, current) {
        if (previous && previous.NetworkName === ("HostInterfaceNetworking-" + netname)) {
          return previous;
        }
        if (current && current.NetworkName === ("HostInterfaceNetworking-" + netname)) {
          return current;
        }
      });
      if (server) {
        if (server.IP !== ip || server.NetworkMask !== netmask || server.lowerIPAddress !== lower_ip || server.upperIPAddress !== upper_ip) {
          return exports.modify_hostonly_server(netname, ip, netmask, lower_ip, upper_ip, callback);
        } else {
          if (callback) {
            return callback();
          }
        }
      } else {
        return exports.add_hostonly_server(netname, ip, netmask, lower_ip, upper_ip, callback);
      }
    });
  };

  /*
  	* Adds internal dhcp server. The server is not enabled by default.
  	*
  	* @param {string} netname
  	* @param {string} ip
  	* @param {string} netmask
  	* @param {string} lower_ip
  	* @param {string} upper_ip
  	* @param {function(?err)} callback
  */


  exports.add_internal_server = function(netname, ip, netmask, lower_ip, upper_ip, callback) {
    var opts;
    opts = [];
    opts.push('--ip') && opts.push(ip);
    opts.push('--netmask') && opts.push(netmask);
    opts.push('--lowerip') && opts.push(lower_ip);
    opts.push('--upperip') && opts.push(upper_ip);
    return command.exec.apply(command, ['dhcpserver', 'add', '--netname', netname].concat(__slice.call(opts), [function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot add internal dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    }]));
  };

  /*
  	* Removes internal dhcp server.
  	*
  	* @param {string} netname
  	* @param {function(?err)} callback
  */


  exports.remove_internal_server = function(netname, callback) {
    return command.exec('dhcpserver', 'remove', '--netname', netname, function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot remove internal dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    });
  };

  /*
  	* Modifies internal dhcp server.
  	*
  	* @param {string} netname
  	* @param {string} ip
  	* @param {string} netmask
  	* @param {string} lower_ip
  	* @param {string} upper_ip
  	* @param {function(?err)} callback
  */


  exports.modify_internal_server = function(netname, ip, netmask, lower_ip, upper_ip, callback) {
    var opts;
    opts = [];
    opts.push('--ip') && opts.push(ip);
    opts.push('--netmask') && opts.push(netmask);
    opts.push('--lowerip') && opts.push(lower_ip);
    opts.push('--upperip') && opts.push(upper_ip);
    return command.exec.apply(command, ['dhcpserver', 'modify', '--netname', netname].concat(__slice.call(opts), [function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot modify internal dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    }]));
  };

  /*
  	* Enables internal dhcp server.
  	*
  	* @param {string} netname
  	* @param {function(?err)} callback
  */


  exports.enable_internal_server = function(netname, callback) {
    var opts;
    opts = [];
    opts.push('--enable');
    return command.exec.apply(command, ['dhcpserver', 'modify', '--netname', netname].concat(__slice.call(opts), [function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot enable internal dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    }]));
  };

  /*
  	* Disables internal dhcp server.
  	*
  	* @param {string} netname
  	* @param {function(?err)} callback
  */


  exports.disable_internal_server = function(netname, callback) {
    var opts;
    opts = [];
    opts.push('--disable');
    return command.exec.apply(command, ['dhcpserver', 'modify', '--netname', netname].concat(__slice.call(opts), [function(err, code, output) {
      if (err) {
        return callback(err);
      }
      if (code > 0) {
        return callback(new Error("cannot disable internal dhcp server on " + netname));
      }
      if (callback) {
        return callback();
      }
    }]));
  };

  /*
  	* Ensures that an internal dhcp server is available and configured.
  	*
  	* @param {string} netname
  	* @param {string} ip
  	* @param {string} netmask
  	* @param {string} lower_ip
  	* @param {string} upper_ip
  	* @param {function(?err)} callback
  */


  exports.ensure_internal_server = function(netname, ip, netmask, lower_ip, upper_ip, callback) {
    return exports.list_servers(function(err, servers) {
      var server;
      if (err) {
        return callback(err);
      }
      server = servers.narrow(function(previous, current) {
        if (previous && previous.NetworkName === netname) {
          return previous;
        }
        if (current && current.NetworkName === netname) {
          return current;
        }
      });
      if (server) {
        if (server.IP !== ip || server.NetworkMask !== netmask || server.lowerIPAddress !== lower_ip || server.upperIPAddress !== upper_ip) {
          return exports.modify_internal_server(netname, ip, netmask, lower_ip, upper_ip, callback);
        } else {
          if (callback) {
            return callback();
          }
        }
      } else {
        return exports.add_internal_server(netname, ip, netmask, lower_ip, upper_ip, callback);
      }
    });
  };

}).call(this);
